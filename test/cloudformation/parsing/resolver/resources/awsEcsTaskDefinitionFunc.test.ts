import log from 'loglevel';
import { awsEcsTaskDefinitionFunc } from '../../../../../src/cloudformation/parsing/resolver/resources/awsEcsTaskDefinitionFunc';
import { ResolvingContext } from '../../../../../src/cloudformation/parsing/types/types';
import {
    generateAlphaNumeric,
    resolveStringWithDefault,
} from '../../../../../src/cloudformation/parsing/utils/helper-utils';
import {
    AWSECSTaskDefinition,
    CloudFormationResource,
} from '../../../../../src/cloudformation/types/cloudformation-model';

// Mock helper functions to control their outputs.
jest.mock('../../../../../src/cloudformation/parsing/utils/helper-utils', () => ({
    generateAlphaNumeric: jest.fn(() => 'MOCKED_FAMILY'),
    resolveStringWithDefault: jest.fn(
        (_property: unknown, defaultValue: string, _propertyName: string, _ctx: ResolvingContext) => defaultValue,
    ),
}));

/**
 * Creates a fresh mock ResolvingContext for testing.
 *
 * @returns A mock ResolvingContext.
 */
function createMockContext(): ResolvingContext {
    return {
        originalTemplate: {},
        lookupMapPreProcessed: {},
        generatedIds: new Set(),
        lookupMapDynamic: {},
        currentPath: [],
        addName: jest.fn(),
        popName: jest.fn(() => ''),
        getCurrentPath: jest.fn(() => ''),
        hasParameterName: jest.fn(() => false),
        getParameter: jest.fn(),
        addParameter: jest.fn(),
        addGeneratedId: jest.fn(),
        isIdExists: jest.fn(() => false),
        getRegion: jest.fn(() => 'us-west-1'),
        getPartition: jest.fn(() => 'aws'),
        getAccountId: jest.fn(() => '123456789012'),
        getAZs: jest.fn(() => ['us-west-1a', 'us-west-1b']),
    } as unknown as ResolvingContext;
}

describe('awsEcsTaskDefinitionFunc', () => {
    let mockCtx: ResolvingContext;
    let resource: CloudFormationResource;

    beforeEach(() => {
        // Create fresh mock context and resource for every test.
        mockCtx = createMockContext();
        resource = {
            Properties: {
                Family: 'MyTaskFamily',
            },
        } as AWSECSTaskDefinition;

        // Ensure _id and _arn are not preset.
        delete resource._id;
        delete resource._arn;

        // Clear previous calls on helper mocks.
        (generateAlphaNumeric as jest.Mock).mockClear();
        (resolveStringWithDefault as jest.Mock).mockClear();
    });

    describe('idGenFunc', () => {
        it('should generate a new ID if not already set', () => {
            const id = awsEcsTaskDefinitionFunc.idGenFunc(
                'AWS::ECS::TaskDefinition',
                'TestLogicalId',
                resource,
                mockCtx,
            );
            // idGenFunc calls arnGenFunc, which uses generateAlphaNumeric and resolveStringWithDefault.
            // Our mocks return: generateAlphaNumeric -> 'MOCKED_FAMILY'
            // and resolveStringWithDefault returns its default argument ('MOCKED_FAMILY')
            // Thus, arnGenFunc constructs:
            // arn:aws:ecs:us-west-1:123456789012:task-definition/MOCKED_FAMILY:1
            const expectedArn = 'arn:aws:ecs:us-west-1:123456789012:task-definition/MOCKED_FAMILY:1';
            expect(id).toBe(expectedArn);
            expect(resource._id).toBe(expectedArn);
            expect(generateAlphaNumeric).toHaveBeenCalledWith(5, mockCtx);
            expect(resolveStringWithDefault).toHaveBeenCalledWith(
                'MyTaskFamily',
                'MOCKED_FAMILY',
                'AWS::ECS::TaskDefinition.Properties.Family',
                mockCtx,
            );
        });

        it('should return the existing ID if already set', () => {
            resource._id = 'existingId';
            const id = awsEcsTaskDefinitionFunc.idGenFunc(
                'AWS::ECS::TaskDefinition',
                'TestLogicalId',
                resource,
                mockCtx,
            );
            expect(id).toBe('existingId');
            expect(generateAlphaNumeric).not.toHaveBeenCalled();
            expect(resolveStringWithDefault).not.toHaveBeenCalled();
        });
    });

    describe('refFunc', () => {
        it('should return the ARN generated by arnGenFunc', () => {
            const arn = awsEcsTaskDefinitionFunc.refFunc(
                'AWS::ECS::TaskDefinition',
                'TestLogicalId',
                resource,
                mockCtx,
            );
            const expectedArn = 'arn:aws:ecs:us-west-1:123456789012:task-definition/MOCKED_FAMILY:1';
            expect(arn).toBe(expectedArn);
        });
    });

    describe('getAttFunc', () => {
        it('should return the ARN when key is "TaskDefinitionArn"', () => {
            const att = awsEcsTaskDefinitionFunc.getAttFunc(
                'AWS::ECS::TaskDefinition',
                'TaskDefinitionArn',
                'TestLogicalId',
                resource,
                mockCtx,
            );
            const expectedArn = 'arn:aws:ecs:us-west-1:123456789012:task-definition/MOCKED_FAMILY:1';
            expect(att).toBe(expectedArn);
        });

        it('should warn and return the ID when an unsupported key is passed', () => {
            const warnSpy = jest.spyOn(log, 'warn').mockImplementation(() => {});
            const att = awsEcsTaskDefinitionFunc.getAttFunc(
                'AWS::ECS::TaskDefinition',
                'UnsupportedKey',
                'TestLogicalId',
                resource,
                mockCtx,
            );
            const expectedArn = 'arn:aws:ecs:us-west-1:123456789012:task-definition/MOCKED_FAMILY:1';
            expect(att).toBe(expectedArn);
            expect(warnSpy).toHaveBeenCalledWith(
                `Passed key UnsupportedKey for AWS::ECS::TaskDefinition, with logicalId=TestLogicalId is not supported, id will be returned`,
                resource,
                mockCtx,
            );
            warnSpy.mockRestore();
        });
    });

    describe('arnGenFunc', () => {
        it('should generate and assign a new ARN if none exists', () => {
            const arn = awsEcsTaskDefinitionFunc.arnGenFunc(
                'AWS::ECS::TaskDefinition',
                'TestLogicalId',
                resource,
                mockCtx,
            );
            const expectedArn = 'arn:aws:ecs:us-west-1:123456789012:task-definition/MOCKED_FAMILY:1';
            expect(arn).toBe(expectedArn);
            expect(resource._arn).toBe(expectedArn);
        });

        it('should return the existing ARN if it is already set', () => {
            resource._arn = 'existingArn';
            const arn = awsEcsTaskDefinitionFunc.arnGenFunc(
                'AWS::ECS::TaskDefinition',
                'TestLogicalId',
                resource,
                mockCtx,
            );
            expect(arn).toBe('existingArn');
        });
    });
});
