import log from 'loglevel';
import { awsSqsQueueFunc } from '../../../../../src/cloudformation/parsing/resolver/resources/awsSqsQueueFunc';
import { ResolvingContext } from '../../../../../src/cloudformation/parsing/types/types';
import {
    generateAlphaNumeric,
    resolveStringWithDefault,
} from '../../../../../src/cloudformation/parsing/utils/helper-utils';
import { CloudFormationResource, SQSQueueResource } from '../../../../../src/cloudformation/types/cloudformation-model';

// Mock the helper functions so we control their outputs.
jest.mock('../../../../../src/cloudformation/parsing/utils/helper-utils', () => ({
    generateAlphaNumeric: jest.fn(() => 'MOCKED_ID'),
    resolveStringWithDefault: jest.fn(
        (_prop: unknown, defaultValue: string, _propName: string, _ctx: ResolvingContext) => defaultValue,
    ),
}));

/**
 * Creates a fresh mock ResolvingContext for testing.
 *
 * @returns A mock ResolvingContext.
 */
function createMockContext(): ResolvingContext {
    return {
        originalTemplate: {},
        lookupMapPreProcessed: {},
        generatedIds: new Set(),
        lookupMapDynamic: {},
        currentPath: [],
        addName: jest.fn(),
        popName: jest.fn(() => ''),
        getCurrentPath: jest.fn(() => ''),
        hasParameterName: jest.fn(() => false),
        getParameter: jest.fn(),
        addParameter: jest.fn(),
        addGeneratedId: jest.fn(),
        isIdExists: jest.fn(() => false),
        getRegion: jest.fn(() => 'us-east-1'),
        getPartition: jest.fn(() => 'aws'),
        getAccountId: jest.fn(() => '123456789012'),
        getAZs: jest.fn(() => ['us-east-1a', 'us-east-1b']),
    } as unknown as ResolvingContext;
}

describe('awsSqsQueueFunc', () => {
    let mockCtx: ResolvingContext;
    let resource: CloudFormationResource;

    beforeEach(() => {
        // Create fresh mock context & resource for every test.
        mockCtx = createMockContext();
        // Create a basic resource mock with the SQS-specific property "QueueName".
        resource = {
            Properties: {
                QueueName: 'dummyQueueName',
            },
        } as SQSQueueResource;

        // Ensure _id and _arn are not preset.
        delete resource._id;
        delete resource._arn;

        // Clear any previous calls on helper mocks.
        (generateAlphaNumeric as jest.Mock).mockClear();
        (resolveStringWithDefault as jest.Mock).mockClear();
    });

    describe('idGenFunc', () => {
        it('should generate a new ID if not already set', () => {
            // idGenFunc generates a default name by concatenating "sqs" with generateAlphaNumeric(6, ctx)
            // With our mocks, generateAlphaNumeric returns "MOCKED_ID", so default becomes "sqsMOCKED_ID".
            // Then, resolveStringWithDefault is called with resource.Properties.QueueName and the default.
            const id = awsSqsQueueFunc.idGenFunc('AWS::SQS::Queue', 'TestLogicalId', resource, mockCtx);
            const expectedDefault = 'sqsMOCKED_ID';
            // Expect the helper to be called with the actual QueueName ("dummyQueueName"), default, and property name.
            expect(resolveStringWithDefault).toHaveBeenCalledWith(
                'dummyQueueName',
                expectedDefault,
                'AWS::SQS::Queue.Properties.QueueName',
                mockCtx,
            );
            // idGenFunc constructs the Queue URL as:
            // "https://sqs.{region}.amazonaws.com/{accountId}/{queueName}"
            const expectedUrl = `https://sqs.us-east-1.amazonaws.com/123456789012/${expectedDefault}`;
            expect(id).toBe(expectedUrl);
            expect(resource._id).toBe(expectedUrl);
            expect(generateAlphaNumeric).toHaveBeenCalledWith(6, mockCtx);
        });

        it('should return the existing ID if already set', () => {
            resource._id = 'existingQueueUrl';
            const id = awsSqsQueueFunc.idGenFunc('AWS::SQS::Queue', 'TestLogicalId', resource, mockCtx);
            expect(id).toBe('existingQueueUrl');
            expect(generateAlphaNumeric).not.toHaveBeenCalled();
            expect(resolveStringWithDefault).not.toHaveBeenCalled();
        });
    });

    describe('refFunc', () => {
        it('should return the ID generated by idGenFunc', () => {
            const ref = awsSqsQueueFunc.refFunc('AWS::SQS::Queue', 'TestLogicalId', resource, mockCtx);
            // refFunc simply returns the value from idGenFunc.
            expect(ref).toBe(resource._id || `https://sqs.us-east-1.amazonaws.com/123456789012/sqsMOCKED_ID`);
        });
    });

    describe('getAttFunc', () => {
        it('should return the ARN when key is "Arn"', () => {
            const att = awsSqsQueueFunc.getAttFunc('AWS::SQS::Queue', 'Arn', 'TestLogicalId', resource, mockCtx);
            // arnGenFunc constructs ARN as:
            // "arn:{partition}:sqs:{region}:{accountId}:{queueName}"
            // where queueName is derived from idGenFunc ("https://sqs.{region}.amazonaws.com/{accountId}/{queueName}")
            // With our mocks, idGenFunc returns:
            // "https://sqs.us-east-1.amazonaws.com/123456789012/sqsMOCKED_ID"
            // Then, in arnGenFunc, removePrefixIfPresent is used to remove the prefix "https://sqs.us-east-1.amazonaws.com/123456789012/".
            // The expected queueName becomes "sqsMOCKED_ID" and ARN is:
            // "arn:aws:sqs:us-east-1:123456789012:sqsMOCKED_ID"
            const expectedArn = 'arn:aws:sqs:us-east-1:123456789012:sqsMOCKED_ID';
            expect(att).toBe(expectedArn);
        });

        it('should return the queue name when key is "QueueName"', () => {
            // When key is "QueueName", getAttFunc calls idGenFunc and then removes the URL prefix.
            const att = awsSqsQueueFunc.getAttFunc('AWS::SQS::Queue', 'QueueName', 'TestLogicalId', resource, mockCtx);
            // Expected: idGenFunc returns "https://sqs.us-east-1.amazonaws.com/123456789012/sqsMOCKED_ID"
            // Removing prefix "https://sqs.us-east-1.amazonaws.com/123456789012/" yields "sqsMOCKED_ID".
            expect(att).toBe('sqsMOCKED_ID');
        });

        it('should return the queue URL when key is "QueueUrl"', () => {
            // When key is "QueueUrl", getAttFunc returns idGenFunc result.
            const att = awsSqsQueueFunc.getAttFunc('AWS::SQS::Queue', 'QueueUrl', 'TestLogicalId', resource, mockCtx);
            const expectedUrl = `https://sqs.us-east-1.amazonaws.com/123456789012/sqsMOCKED_ID`;
            expect(att).toBe(expectedUrl);
        });

        it('should warn and return the ID for unsupported keys', () => {
            const warnSpy = jest.spyOn(log, 'warn').mockImplementation(() => {});
            const att = awsSqsQueueFunc.getAttFunc(
                'AWS::SQS::Queue',
                'UnsupportedKey',
                'TestLogicalId',
                resource,
                mockCtx,
            );
            const expectedUrl = `https://sqs.us-east-1.amazonaws.com/123456789012/sqsMOCKED_ID`;
            expect(att).toBe(expectedUrl);
            expect(warnSpy).toHaveBeenCalledWith(
                `Passed key UnsupportedKey for AWS::SQS::Queue, with logicalId=TestLogicalId is not supported, id will be returned`,
                resource,
                mockCtx,
            );
            warnSpy.mockRestore();
        });
    });

    describe('arnGenFunc', () => {
        it('should generate and assign a new ARN if none exists', () => {
            const arn = awsSqsQueueFunc.arnGenFunc('AWS::SQS::Queue', 'TestLogicalId', resource, mockCtx);
            // idGenFunc returns the queue URL:
            // "https://sqs.us-east-1.amazonaws.com/123456789012/sqsMOCKED_ID"
            // In arnGenFunc, it removes the prefix "https://sqs.us-east-1.amazonaws.com/123456789012/"
            // to get the queue name "sqsMOCKED_ID", then constructs:
            // "arn:{partition}:sqs:{region}:{accountId}:{queueName}"
            const expectedArn = 'arn:aws:sqs:us-east-1:123456789012:sqsMOCKED_ID';
            expect(arn).toBe(expectedArn);
            expect(resource._arn).toBe(expectedArn);
            // Verify that idGenFunc (and hence our helper mocks) were called.
            expect(generateAlphaNumeric).toHaveBeenCalledWith(6, mockCtx);
            expect(resolveStringWithDefault).toHaveBeenCalledWith(
                'dummyQueueName' /* If QueueName were missing, but here it is provided as "dummyQueueName" */,
                'sqsMOCKED_ID',
                'AWS::SQS::Queue.Properties.QueueName',
                mockCtx,
            );
        });

        it('should return the existing ARN if it is already set', () => {
            resource._arn = 'existingArn';
            const arn = awsSqsQueueFunc.arnGenFunc('AWS::SQS::Queue', 'TestLogicalId', resource, mockCtx);
            expect(arn).toBe('existingArn');
        });
    });
});
