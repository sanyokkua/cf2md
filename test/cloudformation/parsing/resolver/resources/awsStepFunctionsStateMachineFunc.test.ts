import log from 'loglevel';
import { awsStepFunctionsStateMachineFunc } from '../../../../../src/cloudformation/parsing/resolver/resources/awsStepFunctionsStateMachineFunc';
import { ResolvingContext } from '../../../../../src/cloudformation/parsing/types/types';
import {
    generateAlphaNumeric,
    resolveStringWithDefault,
} from '../../../../../src/cloudformation/parsing/utils/helper-utils';
import {
    CloudFormationResource,
    StepFunctionsStateMachineResource,
} from '../../../../../src/cloudformation/types/cloudformation-model';

// Mock helper functions to control their outputs.
jest.mock('../../../../../src/cloudformation/parsing/utils/helper-utils', () => ({
    generateAlphaNumeric: jest.fn(() => 'MOCKED_ALPHA'),
    resolveStringWithDefault: jest.fn(
        (_prop: unknown, defaultValue: string, _propName: string, _ctx: ResolvingContext) => defaultValue,
    ),
}));

/**
 * Creates a fresh mock ResolvingContext for testing.
 *
 * @returns A mock ResolvingContext.
 */
function createMockContext(): ResolvingContext {
    return {
        originalTemplate: {},
        lookupMapPreProcessed: {},
        generatedIds: new Set(),
        lookupMapDynamic: {},
        currentPath: [],
        addName: jest.fn(),
        popName: jest.fn(() => ''),
        getCurrentPath: jest.fn(() => ''),
        hasParameterName: jest.fn(() => false),
        getParameter: jest.fn(),
        addParameter: jest.fn(),
        addGeneratedId: jest.fn(),
        isIdExists: jest.fn(() => false),
        getRegion: jest.fn(() => 'us-east-1'),
        getPartition: jest.fn(() => 'aws'),
        getAccountId: jest.fn(() => '123456789012'),
        getAZs: jest.fn(() => ['us-east-1a', 'us-east-1b']),
    } as unknown as ResolvingContext;
}

describe('awsStepFunctionsStateMachineFunc', () => {
    let mockCtx: ResolvingContext;
    let resource: CloudFormationResource;

    beforeEach(() => {
        // Create fresh context and resource for every test.
        mockCtx = createMockContext();
        resource = {
            Properties: {
                // For a Step Functions state machine, the property is StateMachineName.
                StateMachineName: 'dummyStateMachineName',
            },
        } as StepFunctionsStateMachineResource;

        // Ensure _id and _arn are not preset.
        delete resource._id;
        delete resource._arn;

        // Clear previous calls on helper mocks.
        (generateAlphaNumeric as jest.Mock).mockClear();
        (resolveStringWithDefault as jest.Mock).mockClear();
    });

    describe('idGenFunc', () => {
        it('should generate a new ID if not already set', () => {
            // arnGenFunc uses generateAlphaNumeric(6, ctx) to build a default name "sf-MOCKED_ALPHA".
            // Our resolveStringWithDefault mock returns the default value.
            // Therefore, arnGenFunc returns:
            // "arn:aws:states:us-east-1:123456789012:stateMachine:sf-MOCKED_ALPHA"
            // idGenFunc calls arnGenFunc and returns that value.
            const id = awsStepFunctionsStateMachineFunc.idGenFunc(
                'AWS::StepFunctions::StateMachine',
                'TestLogicalId',
                resource,
                mockCtx,
            );
            const expectedArn = 'arn:aws:states:us-east-1:123456789012:stateMachine:sf-MOCKED_ALPHA';
            expect(id).toBe(expectedArn);
            expect(resource._id).toBe(expectedArn);
            expect(generateAlphaNumeric).toHaveBeenCalledWith(6, mockCtx);
            expect(resolveStringWithDefault).toHaveBeenCalledWith(
                'dummyStateMachineName',
                'sf-MOCKED_ALPHA',
                'AWS::StepFunctions::StateMachine.Properties.StateMachineName',
                mockCtx,
            );
        });

        it('should return the existing ID if already set', () => {
            resource._id = 'existingId';
            const id = awsStepFunctionsStateMachineFunc.idGenFunc(
                'AWS::StepFunctions::StateMachine',
                'TestLogicalId',
                resource,
                mockCtx,
            );
            expect(id).toBe('existingId');
            // When an ID is already present, helpers are not called.
            expect(generateAlphaNumeric).not.toHaveBeenCalled();
            expect(resolveStringWithDefault).not.toHaveBeenCalled();
        });
    });

    describe('refFunc', () => {
        it('should return the ARN generated by arnGenFunc (and thus the ID)', () => {
            const ref = awsStepFunctionsStateMachineFunc.refFunc(
                'AWS::StepFunctions::StateMachine',
                'TestLogicalId',
                resource,
                mockCtx,
            );
            // refFunc calls arnGenFunc, which returns the ARN.
            const expectedArn = 'arn:aws:states:us-east-1:123456789012:stateMachine:sf-MOCKED_ALPHA';
            expect(ref).toBe(expectedArn);
        });
    });

    describe('getAttFunc', () => {
        it('should return the ARN when key is "Arn"', () => {
            const att = awsStepFunctionsStateMachineFunc.getAttFunc(
                'AWS::StepFunctions::StateMachine',
                'Arn',
                'TestLogicalId',
                resource,
                mockCtx,
            );
            const expectedArn = 'arn:aws:states:us-east-1:123456789012:stateMachine:sf-MOCKED_ALPHA';
            expect(att).toBe(expectedArn);
        });

        it('should return the state machine name when key is "Name"', () => {
            // getAttFunc with key "Name" calls arnGenFunc to get the ARN, then removes the prefix.
            const att = awsStepFunctionsStateMachineFunc.getAttFunc(
                'AWS::StepFunctions::StateMachine',
                'Name',
                'TestLogicalId',
                resource,
                mockCtx,
            );
            // The ARN produced is:
            // "arn:aws:states:us-east-1:123456789012:stateMachine:sf-MOCKED_ALPHA"
            // The expected prefix is:
            // const expectedPrefix = 'arn:aws:states:us-east-1:123456789012:stateMachine:';
            // After removing the prefix, the result should be "sf-MOCKED_ALPHA"
            expect(att).toBe('sf-MOCKED_ALPHA');
        });

        it('should return "RUNTIME_StateMachineRevisionId" when key is "StateMachineRevisionId"', () => {
            const att = awsStepFunctionsStateMachineFunc.getAttFunc(
                'AWS::StepFunctions::StateMachine',
                'StateMachineRevisionId',
                'TestLogicalId',
                resource,
                mockCtx,
            );
            expect(att).toBe('RUNTIME_StateMachineRevisionId');
        });

        it('should warn and return the ID for unsupported keys', () => {
            const warnSpy = jest.spyOn(log, 'warn').mockImplementation(() => {});
            const att = awsStepFunctionsStateMachineFunc.getAttFunc(
                'AWS::StepFunctions::StateMachine',
                'UnsupportedKey',
                'TestLogicalId',
                resource,
                mockCtx,
            );
            // For unsupported keys, getAttFunc falls back to idGenFunc.
            const expectedId = 'arn:aws:states:us-east-1:123456789012:stateMachine:sf-MOCKED_ALPHA';
            expect(att).toBe(expectedId);
            expect(warnSpy).toHaveBeenCalledWith(
                `Passed key UnsupportedKey for AWS::StepFunctions::StateMachine, with logicalId=TestLogicalId is not supported, id will be returned`,
                resource,
                mockCtx,
            );
            warnSpy.mockRestore();
        });
    });

    describe('arnGenFunc', () => {
        it('should generate and assign a new ARN if none exists', () => {
            const arn = awsStepFunctionsStateMachineFunc.arnGenFunc(
                'AWS::StepFunctions::StateMachine',
                'TestLogicalId',
                resource,
                mockCtx,
            );
            const expectedArn = 'arn:aws:states:us-east-1:123456789012:stateMachine:sf-MOCKED_ALPHA';
            expect(arn).toBe(expectedArn);
            expect(resource._arn).toBe(expectedArn);
            expect(generateAlphaNumeric).toHaveBeenCalledWith(6, mockCtx);
            expect(resolveStringWithDefault).toHaveBeenCalledWith(
                'dummyStateMachineName',
                'sf-MOCKED_ALPHA',
                'AWS::StepFunctions::StateMachine.Properties.StateMachineName',
                mockCtx,
            );
        });

        it('should return the existing ARN if it is already set', () => {
            resource._arn = 'existingArn';
            const arn = awsStepFunctionsStateMachineFunc.arnGenFunc(
                'AWS::StepFunctions::StateMachine',
                'TestLogicalId',
                resource,
                mockCtx,
            );
            expect(arn).toBe('existingArn');
        });
    });
});
