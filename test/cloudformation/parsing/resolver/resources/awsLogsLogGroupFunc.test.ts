import log from 'loglevel';
import { awsLogsLogGroupFunc } from '../../../../../src/cloudformation/parsing/resolver/resources/awsLogsLogGroupFunc';
import { ResolvingContext } from '../../../../../src/cloudformation/parsing/types/types';
import {
    generateAlphaNumeric,
    resolveStringWithDefault,
} from '../../../../../src/cloudformation/parsing/utils/helper-utils';
import { CloudFormationResource, LogGroupResource } from '../../../../../src/cloudformation/types/cloudformation-model';

// Mock helper functions to control their outputs.
jest.mock('../../../../../src/cloudformation/parsing/utils/helper-utils', () => ({
    generateAlphaNumeric: jest.fn(() => 'MOCKED_ALPHA'),
    resolveStringWithDefault: jest.fn(
        (_prop: unknown, defaultValue: string, _propName: string, _ctx: ResolvingContext) => defaultValue,
    ),
}));

/**
 * Creates a fresh mock ResolvingContext for testing.
 *
 * @returns A mock ResolvingContext.
 */
function createMockContext(): ResolvingContext {
    return {
        originalTemplate: {},
        lookupMapPreProcessed: {},
        generatedIds: new Set(),
        lookupMapDynamic: {},
        currentPath: [],
        addName: jest.fn(),
        popName: jest.fn(() => ''),
        getCurrentPath: jest.fn(() => ''),
        hasParameterName: jest.fn(() => false),
        getParameter: jest.fn(),
        addParameter: jest.fn(),
        addGeneratedId: jest.fn(),
        isIdExists: jest.fn(() => false),
        getRegion: jest.fn(() => 'us-east-1'),
        getPartition: jest.fn(() => 'aws'),
        getAccountId: jest.fn(() => '123456789012'),
        getAZs: jest.fn(() => ['us-east-1a', 'us-east-1b']),
    } as unknown as ResolvingContext;
}

describe('awsLogsLogGroupFunc', () => {
    let mockCtx: ResolvingContext;
    let resource: CloudFormationResource;

    beforeEach(() => {
        // Create fresh context and resource for each test.
        mockCtx = createMockContext();
        resource = {
            Properties: {
                LogGroupName: 'dummyLogGroupName',
            },
        } as LogGroupResource;

        // Ensure _id and _arn are not preset.
        delete resource._id;
        delete resource._arn;

        // Clear previous calls on helper mocks.
        (generateAlphaNumeric as jest.Mock).mockClear();
        (resolveStringWithDefault as jest.Mock).mockClear();
    });

    describe('idGenFunc', () => {
        it('should generate a new ID if not already set', () => {
            // When _id is not set, idGenFunc should generate a default name.
            const id = awsLogsLogGroupFunc.idGenFunc('AWS::Logs::LogGroup', 'TestLogicalId', resource, mockCtx);
            // Expected default value: "log-group-" + generateAlphaNumeric(6, ctx)
            // Our mock generateAlphaNumeric returns "MOCKED_ALPHA"
            const expectedDefault = `log-group-MOCKED_ALPHA`;
            // Verify resolveStringWithDefault is called with:
            // property: resource.Properties.LogGroupName ('dummyLogGroupName')
            // defaultValue: expectedDefault, propertyName: 'AWS::Logs::LogGroup.Properties.LogGroupName'
            expect(resolveStringWithDefault).toHaveBeenCalledWith(
                'dummyLogGroupName',
                expectedDefault,
                'AWS::Logs::LogGroup.Properties.LogGroupName',
                mockCtx,
            );
            // Our mocked resolveStringWithDefault returns its default argument, so id should be expectedDefault.
            expect(id).toBe(expectedDefault);
            expect(resource._id).toBe(expectedDefault);
            // Verify generateAlphaNumeric was called with length 6 and the mock context.
            expect(generateAlphaNumeric).toHaveBeenCalledWith(6, mockCtx);
        });

        it('should return the existing ID if already set', () => {
            resource._id = 'existingLogGroupId';
            const id = awsLogsLogGroupFunc.idGenFunc('AWS::Logs::LogGroup', 'TestLogicalId', resource, mockCtx);
            expect(id).toBe('existingLogGroupId');
            // Helpers should not be called when _id exists.
            expect(generateAlphaNumeric).not.toHaveBeenCalled();
            expect(resolveStringWithDefault).not.toHaveBeenCalled();
        });
    });

    describe('refFunc', () => {
        it('should return the ID generated by idGenFunc', () => {
            const id = awsLogsLogGroupFunc.refFunc('AWS::Logs::LogGroup', 'TestLogicalId', resource, mockCtx);
            // refFunc calls idGenFunc, so expect same result.
            expect(id).toBe(resource._id || 'log-group-MOCKED_ALPHA');
        });
    });

    describe('getAttFunc', () => {
        it('should return the ARN when key is "Arn"', () => {
            // getAttFunc with key "Arn" calls arnGenFunc.
            const att = awsLogsLogGroupFunc.getAttFunc(
                'AWS::Logs::LogGroup',
                'Arn',
                'TestLogicalId',
                resource,
                mockCtx,
            );
            // arnGenFunc calls idGenFunc to get the logGroup name and constructs ARN:
            // arn:{partition}:logs:{region}:{accountId}:log-group:{logGroupName}:*
            const expectedArn = `arn:aws:logs:us-east-1:123456789012:log-group:log-group-MOCKED_ALPHA:*`;
            expect(att).toBe(expectedArn);
        });

        it('should warn and return the ID when an unsupported key is passed', () => {
            const warnSpy = jest.spyOn(log, 'warn').mockImplementation(() => {});
            const att = awsLogsLogGroupFunc.getAttFunc(
                'AWS::Logs::LogGroup',
                'UnsupportedKey',
                'TestLogicalId',
                resource,
                mockCtx,
            );
            // For unsupported keys, getAttFunc falls back to idGenFunc.
            const expectedId = resource._id || 'log-group-MOCKED_ALPHA';
            expect(att).toBe(expectedId);
            expect(warnSpy).toHaveBeenCalledWith(
                `Passed key UnsupportedKey for AWS::Logs::LogGroup, with logicalId=TestLogicalId is not supported, id will be returned`,
                resource,
                mockCtx,
            );
            warnSpy.mockRestore();
        });
    });

    describe('arnGenFunc', () => {
        it('should generate and assign a new ARN if none exists', () => {
            const arn = awsLogsLogGroupFunc.arnGenFunc('AWS::Logs::LogGroup', 'TestLogicalId', resource, mockCtx);
            // idGenFunc returns default log group name: "log-group-MOCKED_ALPHA"
            // ARN is constructed as:
            // arn:{partition}:logs:{region}:{accountId}:log-group:{logGroupName}:*
            const expectedArn = `arn:aws:logs:us-east-1:123456789012:log-group:log-group-MOCKED_ALPHA:*`;
            expect(arn).toBe(expectedArn);
            expect(resource._arn).toBe(expectedArn);
            // Since arnGenFunc calls idGenFunc internally, the helpers should have been called.
            expect(generateAlphaNumeric).toHaveBeenCalledWith(6, mockCtx);
            expect(resolveStringWithDefault).toHaveBeenCalledWith(
                'dummyLogGroupName',
                'log-group-MOCKED_ALPHA',
                'AWS::Logs::LogGroup.Properties.LogGroupName',
                mockCtx,
            );
        });

        it('should return the existing ARN if it is already set', () => {
            resource._arn = 'existingArn';
            const arn = awsLogsLogGroupFunc.arnGenFunc('AWS::Logs::LogGroup', 'TestLogicalId', resource, mockCtx);
            expect(arn).toBe('existingArn');
        });
    });
});
