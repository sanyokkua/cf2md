import { removePrefixIfPresent } from 'coreutilsts';
import log from 'loglevel';
import { awsSnsSubscriptionFunc } from '../../../../../src/cloudformation/parsing/resolver/resources/awsSnsSubscriptionFunc';
import { ResolvingContext } from '../../../../../src/cloudformation/parsing/types/types';
import { fullUuid, resolveString } from '../../../../../src/cloudformation/parsing/utils/helper-utils';
import {
    CloudFormationResource,
    SNSSubscriptionResource,
} from '../../../../../src/cloudformation/types/cloudformation-model';

// Mock the helper functions to control their outputs.
jest.mock('coreutilsts', () => ({
    removePrefixIfPresent: jest.fn((s: string, prefix: string) => {
        // For our tests, if s equals "resolvedTopicArn" and prefix is as expected,
        // return "MyTopic"; otherwise, return s without the prefix.
        return s === 'resolvedTopicArn' ? 'MyTopic' : s.replace(prefix, '');
    }),
}));

jest.mock('../../../../../src/cloudformation/parsing/utils/helper-utils', () => ({
    fullUuid: jest.fn(() => 'FULL_UUID'),
    resolveString: jest.fn((_value: unknown, _propertyName: string, _ctx: ResolvingContext) => 'resolvedTopicArn'),
}));

/**
 * Creates a fresh mock ResolvingContext for testing.
 *
 * @returns A mock ResolvingContext.
 */
function createMockContext(): ResolvingContext {
    return {
        originalTemplate: {},
        lookupMapPreProcessed: {},
        generatedIds: new Set(),
        lookupMapDynamic: {},
        currentPath: [],
        addName: jest.fn(),
        popName: jest.fn(() => ''),
        getCurrentPath: jest.fn(() => ''),
        hasParameterName: jest.fn(() => false),
        getParameter: jest.fn(),
        addParameter: jest.fn(),
        addGeneratedId: jest.fn(),
        isIdExists: jest.fn(() => false),
        getRegion: jest.fn(() => 'us-east-1'),
        getPartition: jest.fn(() => 'aws'),
        getAccountId: jest.fn(() => '123456789012'),
        getAZs: jest.fn(() => ['us-east-1a', 'us-east-1b']),
    } as unknown as ResolvingContext;
}

describe('awsSnsSubscriptionFunc', () => {
    let mockCtx: ResolvingContext;
    let resource: CloudFormationResource;

    beforeEach(() => {
        // Create a fresh context and resource for every test.
        mockCtx = createMockContext();
        resource = {
            Properties: {
                // For SNS Subscription, the TopicArn property is required.
                TopicArn: 'arn:aws:sns:us-east-1:123456789012:MyTopic',
            },
        } as SNSSubscriptionResource;

        // Ensure _id and _arn are not preset.
        delete resource._id;
        delete resource._arn;

        // Clear previous calls on helper mocks.
        (fullUuid as jest.Mock).mockClear();
        (resolveString as jest.Mock).mockClear();
        (removePrefixIfPresent as jest.Mock).mockClear();
    });

    describe('idGenFunc', () => {
        it('should generate a new ID if not already set', () => {
            // idGenFunc calls fullUuid(ctx) if _id is not set.
            const id = awsSnsSubscriptionFunc.idGenFunc('AWS::SNS::Subscription', 'TestLogicalId', resource, mockCtx);
            expect(fullUuid).toHaveBeenCalledWith(mockCtx);
            expect(id).toBe('FULL_UUID');
            expect(resource._id).toBe('FULL_UUID');
        });

        it('should return the existing ID if already set', () => {
            resource._id = 'existingSubscriptionId';
            const id = awsSnsSubscriptionFunc.idGenFunc('AWS::SNS::Subscription', 'TestLogicalId', resource, mockCtx);
            expect(id).toBe('existingSubscriptionId');
            expect(fullUuid).not.toHaveBeenCalled();
        });
    });

    describe('refFunc', () => {
        it('should return the ID generated by idGenFunc', () => {
            const id = awsSnsSubscriptionFunc.refFunc('AWS::SNS::Subscription', 'TestLogicalId', resource, mockCtx);
            // refFunc simply returns the result of idGenFunc.
            expect(id).toBe(resource._id || 'FULL_UUID');
        });
    });

    describe('getAttFunc', () => {
        it('should return the ARN when key is "Arn"', () => {
            // getAttFunc calls arnGenFunc when key is "Arn".
            const att = awsSnsSubscriptionFunc.getAttFunc(
                'AWS::SNS::Subscription',
                'Arn',
                'TestLogicalId',
                resource,
                mockCtx,
            );
            // arnGenFunc will be tested separately.
            // Here, expect att to equal the ARN generated by arnGenFunc.
            const expectedArn = 'arn:aws:sns:us-east-1:123456789012:MyTopic:/FULL_UUID';
            expect(att).toBe(expectedArn);
        });

        it('should warn and return the ID when an unsupported key is passed', () => {
            const warnSpy = jest.spyOn(log, 'warn').mockImplementation(() => {});
            const att = awsSnsSubscriptionFunc.getAttFunc(
                'AWS::SNS::Subscription',
                'UnsupportedKey',
                'TestLogicalId',
                resource,
                mockCtx,
            );
            // For unsupported keys, getAttFunc returns idGenFunc (the subscription ID).
            expect(att).toBe('FULL_UUID');
            expect(warnSpy).toHaveBeenCalledWith(
                `Passed key UnsupportedKey for AWS::SNS::Subscription, with logicalId=TestLogicalId is not supported, id will be returned`,
                resource,
                mockCtx,
            );
            warnSpy.mockRestore();
        });
    });

    describe('arnGenFunc', () => {
        it('should generate and assign a new ARN if none exists', () => {
            const arn = awsSnsSubscriptionFunc.arnGenFunc('AWS::SNS::Subscription', 'TestLogicalId', resource, mockCtx);
            // Expected behavior:
            // 1. resolveString is called on TopicArn property, returning "resolvedTopicArn".
            expect(resolveString).toHaveBeenCalledWith(
                'arn:aws:sns:us-east-1:123456789012:MyTopic',
                'AWS::SNS::Subscription.Properties.TopicArn',
                mockCtx,
            );
            // 2. removePrefixIfPresent is called to remove the prefix "arn:aws:sns:us-east-1:123456789012:".
            const expectedPrefix = 'arn:aws:sns:us-east-1:123456789012:';
            expect(removePrefixIfPresent).toHaveBeenCalledWith('resolvedTopicArn', expectedPrefix);
            // removePrefixIfPresent mock returns "MyTopic" as defined.
            // 3. subscriptionId is generated by idGenFunc (which returns "FULL_UUID")
            // ARN format is: arn:{partition}:sns:{region}:{accountId}:{topicName}:/{subscriptionId}
            const expectedArn = 'arn:aws:sns:us-east-1:123456789012:MyTopic:/FULL_UUID';
            expect(arn).toBe(expectedArn);
            expect(resource._arn).toBe(expectedArn);
        });

        it('should return the existing ARN if it is already set', () => {
            resource._arn = 'existingArn';
            const arn = awsSnsSubscriptionFunc.arnGenFunc('AWS::SNS::Subscription', 'TestLogicalId', resource, mockCtx);
            expect(arn).toBe('existingArn');
        });
    });
});
