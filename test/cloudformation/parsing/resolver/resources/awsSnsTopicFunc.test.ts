import { removePrefixIfPresent } from 'coreutilsts';
import log from 'loglevel';
import { awsSnsTopicFunc } from '../../../../../src/cloudformation/parsing/resolver/resources/awsSnsTopicFunc';
import { ResolvingContext } from '../../../../../src/cloudformation/parsing/types/types';
import {
    generateAlphaNumeric,
    resolveStringWithDefault,
} from '../../../../../src/cloudformation/parsing/utils/helper-utils';
import { CloudFormationResource, SNSTopicResource } from '../../../../../src/cloudformation/types/cloudformation-model';

// Mock helper functions to control their outputs.
jest.mock('coreutilsts', () => ({
    removePrefixIfPresent: jest.fn((arn: string, prefix: string) => {
        // If the ARN starts with the prefix, remove it.
        return arn.startsWith(prefix) ? arn.substring(prefix.length) : arn;
    }),
}));

jest.mock('../../../../../src/cloudformation/parsing/utils/helper-utils', () => ({
    generateAlphaNumeric: jest.fn(() => 'MOCKED_ID'),
    resolveStringWithDefault: jest.fn(
        (_prop: unknown, defaultValue: string, _propName: string, _ctx: ResolvingContext) => defaultValue,
    ),
}));

/**
 * Creates a fresh mock ResolvingContext for testing.
 *
 * @returns A mock ResolvingContext.
 */
function createMockContext(): ResolvingContext {
    return {
        originalTemplate: {},
        lookupMapPreProcessed: {},
        generatedIds: new Set(),
        lookupMapDynamic: {},
        currentPath: [],
        addName: jest.fn(),
        popName: jest.fn(() => ''),
        getCurrentPath: jest.fn(() => ''),
        hasParameterName: jest.fn(() => false),
        getParameter: jest.fn(),
        addParameter: jest.fn(),
        addGeneratedId: jest.fn(),
        isIdExists: jest.fn(() => false),
        getRegion: jest.fn(() => 'us-east-1'),
        getPartition: jest.fn(() => 'aws'),
        getAccountId: jest.fn(() => '123456789012'),
        getAZs: jest.fn(() => ['us-east-1a', 'us-east-1b']),
    } as unknown as ResolvingContext;
}

describe('awsSnsTopicFunc', () => {
    let mockCtx: ResolvingContext;
    let resource: CloudFormationResource;

    beforeEach(() => {
        // Create a fresh mock context and resource for every test.
        mockCtx = createMockContext();
        resource = {
            Properties: {
                // The resource-specific property for SNS Topic is TopicName.
                TopicName: 'dummyTopicName',
            },
        } as SNSTopicResource;

        // Ensure _id and _arn are not preset.
        delete resource._id;
        delete resource._arn;

        // Clear previous calls on helper mocks.
        (generateAlphaNumeric as jest.Mock).mockClear();
        (resolveStringWithDefault as jest.Mock).mockClear();
    });

    describe('idGenFunc', () => {
        it('should generate a new ID if not already set', () => {
            // idGenFunc generates a default using generateAlphaNumeric(6, ctx)
            // Default becomes: "topic-" + generateAlphaNumeric(6, ctx)
            // With our mock, generateAlphaNumeric returns "MOCKED_ID"
            // and resolveStringWithDefault returns its default, so the result is "topic-MOCKED_ID"
            const id = awsSnsTopicFunc.idGenFunc('AWS::SNS::Topic', 'TestLogicalId', resource, mockCtx);
            expect(generateAlphaNumeric).toHaveBeenCalledWith(6, mockCtx);
            expect(resolveStringWithDefault).toHaveBeenCalledWith(
                'dummyTopicName',
                'topic-MOCKED_ID',
                'AWS::SNS::Topic.Properties.Topic',
                mockCtx,
            );
            expect(id).toBe('topic-MOCKED_ID');
            expect(resource._id).toBe('topic-MOCKED_ID');
        });

        it('should return the existing ID if already set', () => {
            resource._id = 'existingTopicId';
            const id = awsSnsTopicFunc.idGenFunc('AWS::SNS::Topic', 'TestLogicalId', resource, mockCtx);
            expect(id).toBe('existingTopicId');
            // When _id is present, helper functions are not called.
            expect(generateAlphaNumeric).not.toHaveBeenCalled();
            expect(resolveStringWithDefault).not.toHaveBeenCalled();
        });
    });

    describe('refFunc', () => {
        it('should return the ID generated by idGenFunc', () => {
            const ref = awsSnsTopicFunc.refFunc('AWS::SNS::Topic', 'TestLogicalId', resource, mockCtx);
            // refFunc returns the same value as idGenFunc.
            expect(ref).toBe('arn:aws:sns:us-east-1:123456789012:topic-MOCKED_ID');
        });
    });

    describe('getAttFunc', () => {
        it('should return the ARN when key is "TopicArn"', () => {
            const att = awsSnsTopicFunc.getAttFunc('AWS::SNS::Topic', 'TopicArn', 'TestLogicalId', resource, mockCtx);
            // arnGenFunc is used to build the ARN.
            // arnGenFunc calls idGenFunc to get the topic name ("topic-MOCKED_ID") and then constructs:
            // arn:{partition}:sns:{region}:{accountId}:{topicName}
            const expectedArn = 'arn:aws:sns:us-east-1:123456789012:topic-MOCKED_ID';
            expect(att).toBe(expectedArn);
        });

        it('should return the topic name when key is "TopicName"', () => {
            // getAttFunc with key "TopicName" calls arnGenFunc, then removes the ARN prefix.
            const att = awsSnsTopicFunc.getAttFunc('AWS::SNS::Topic', 'TopicName', 'TestLogicalId', resource, mockCtx);
            // Expected ARN from arnGenFunc:
            // "arn:aws:sns:us-east-1:123456789012:topic-MOCKED_ID"
            // The prefix to remove is "arn:aws:sns:us-east-1:123456789012:"
            const expectedPrefix = 'arn:aws:sns:us-east-1:123456789012:';
            // Our removePrefixIfPresent mock will remove the prefix, leaving "topic-MOCKED_ID"
            expect(removePrefixIfPresent).toHaveBeenCalledWith(
                'arn:aws:sns:us-east-1:123456789012:topic-MOCKED_ID',
                expectedPrefix,
            );
            expect(att).toBe('topic-MOCKED_ID');
        });

        it('should warn and return the ID for unsupported keys', () => {
            const warnSpy = jest.spyOn(log, 'warn').mockImplementation(() => {});
            const att = awsSnsTopicFunc.getAttFunc(
                'AWS::SNS::Topic',
                'UnsupportedKey',
                'TestLogicalId',
                resource,
                mockCtx,
            );
            // For unsupported keys, getAttFunc returns the result of idGenFunc ("topic-MOCKED_ID")
            expect(att).toBe('topic-MOCKED_ID');
            expect(warnSpy).toHaveBeenCalledWith(
                `Passed key UnsupportedKey for AWS::SNS::Topic, with logicalId=TestLogicalId is not supported, id will be returned`,
                resource,
                mockCtx,
            );
            warnSpy.mockRestore();
        });
    });

    describe('arnGenFunc', () => {
        it('should generate and assign a new ARN if none exists', () => {
            const arn = awsSnsTopicFunc.arnGenFunc('AWS::SNS::Topic', 'TestLogicalId', resource, mockCtx);
            // arnGenFunc calls idGenFunc, which returns "topic-MOCKED_ID"
            // Then it constructs the ARN as: arn:{partition}:sns:{region}:{accountId}:{topicName}
            const expectedArn = 'arn:aws:sns:us-east-1:123456789012:topic-MOCKED_ID';
            expect(arn).toBe(expectedArn);
            expect(resource._arn).toBe(expectedArn);
            // Verify that idGenFunc was called internally (and hence our helper mocks were called)
            expect(generateAlphaNumeric).toHaveBeenCalledWith(6, mockCtx);
            expect(resolveStringWithDefault).toHaveBeenCalledWith(
                'dummyTopicName',
                'topic-MOCKED_ID',
                'AWS::SNS::Topic.Properties.Topic',
                mockCtx,
            );
        });

        it('should return the existing ARN if it is already set', () => {
            resource._arn = 'existingArn';
            const arn = awsSnsTopicFunc.arnGenFunc('AWS::SNS::Topic', 'TestLogicalId', resource, mockCtx);
            expect(arn).toBe('existingArn');
        });
    });
});
