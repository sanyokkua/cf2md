import log from 'loglevel';
import { awsDynamoDbTableFunc } from '../../../../../src/cloudformation/parsing/resolver/resources/awsDynamoDbTableFunc';
import { ResolvingContext } from '../../../../../src/cloudformation/parsing/types/types';
import { resolveStringWithDefault } from '../../../../../src/cloudformation/parsing/utils/helper-utils';
import {
    CloudFormationResource,
    DynamoDBTableResource,
} from '../../../../../src/cloudformation/types/cloudformation-model';

// Mock the helper so we control its output.
jest.mock('../../../../../src/cloudformation/parsing/utils/helper-utils', () => ({
    resolveStringWithDefault: jest.fn(() => 'DEFAULT_TABLE'),
}));

/**
 * Creates a fresh mock ResolvingContext for testing.
 *
 * @returns A mock ResolvingContext.
 */
function createMockContext(): ResolvingContext {
    return {
        originalTemplate: {},
        lookupMapPreProcessed: {},
        generatedIds: new Set(),
        lookupMapDynamic: {},
        currentPath: [],
        addName: jest.fn(),
        popName: jest.fn(() => ''),
        getCurrentPath: jest.fn(() => ''),
        hasParameterName: jest.fn(() => false),
        getParameter: jest.fn(),
        addParameter: jest.fn(),
        addGeneratedId: jest.fn(),
        isIdExists: jest.fn(() => false),
        getRegion: jest.fn(() => 'us-west-2'),
        getPartition: jest.fn(() => 'aws'),
        getAccountId: jest.fn(() => '111122223333'),
        getAZs: jest.fn(() => ['us-west-2a', 'us-west-2b']),
    } as unknown as ResolvingContext;
}

describe('awsDynamoDbTableFunc', () => {
    let mockCtx: ResolvingContext;
    let resource: CloudFormationResource;

    beforeEach(() => {
        // Create fresh mock context and resource for every test.
        mockCtx = createMockContext();
        resource = {
            Properties: {
                // TableName property is used by idGenFunc.
                TableName: 'MyTable',
            },
        } as DynamoDBTableResource;

        // Ensure _id and _arn are not preset.
        delete resource._id;
        delete resource._arn;

        // Clear any previous calls on the helper mock.
        (resolveStringWithDefault as jest.Mock).mockClear();
    });

    describe('idGenFunc', () => {
        it('should generate a new ID if not already set', () => {
            // When _id is not set, idGenFunc should call resolveStringWithDefault.
            const id = awsDynamoDbTableFunc.idGenFunc('AWS::DynamoDB::Table', 'TestLogicalId', resource, mockCtx);
            // The helper is called with:
            // - property: resource.Properties.TableName ('MyTable')
            // - default value: logicalId ('TestLogicalId')
            // - propertyName: 'AWS::DynamoDB::Table.Properties.TableName'
            expect(resolveStringWithDefault).toHaveBeenCalledWith(
                'MyTable',
                'TestLogicalId',
                'AWS::DynamoDB::Table.Properties.TableName',
                mockCtx,
            );
            // Our mock returns 'DEFAULT_TABLE'
            expect(id).toBe('DEFAULT_TABLE');
            expect(resource._id).toBe('DEFAULT_TABLE');
        });

        it('should return the existing ID if already set', () => {
            resource._id = 'existingTableId';
            const id = awsDynamoDbTableFunc.idGenFunc('AWS::DynamoDB::Table', 'TestLogicalId', resource, mockCtx);
            expect(id).toBe('existingTableId');
            expect(resolveStringWithDefault).not.toHaveBeenCalled();
        });
    });

    describe('refFunc', () => {
        it('should return the ID generated by idGenFunc', () => {
            const id = awsDynamoDbTableFunc.refFunc('AWS::DynamoDB::Table', 'TestLogicalId', resource, mockCtx);
            // refFunc simply calls idGenFunc
            expect(id).toBe(resource._id || 'DEFAULT_TABLE');
        });
    });

    describe('getAttFunc', () => {
        it('should return the ARN when key is "Arn"', () => {
            // Call getAttFunc with key "Arn" so it calls arnGenFunc.
            const arn = awsDynamoDbTableFunc.getAttFunc(
                'AWS::DynamoDB::Table',
                'Arn',
                'TestLogicalId',
                resource,
                mockCtx,
            );
            // arnGenFunc will call idGenFunc and then build the ARN.
            // Since idGenFunc returns 'DEFAULT_TABLE' (from our mock helper),
            // and context returns region 'us-west-2', partition 'aws', account '111122223333'
            const expectedArn = 'arn:aws:dynamodb:us-west-2:111122223333:table/DEFAULT_TABLE';
            expect(arn).toBe(expectedArn);
        });

        it('should return a fixed value for "StreamArn"', () => {
            const streamArn = awsDynamoDbTableFunc.getAttFunc(
                'AWS::DynamoDB::Table',
                'StreamArn',
                'TestLogicalId',
                resource,
                mockCtx,
            );
            expect(streamArn).toBe('RUNTIME_StreamArn');
        });

        it('should warn and return the ID for unsupported attribute keys', () => {
            const warnSpy = jest.spyOn(log, 'warn').mockImplementation(() => {});
            const id = awsDynamoDbTableFunc.getAttFunc(
                'AWS::DynamoDB::Table',
                'UnsupportedKey',
                'TestLogicalId',
                resource,
                mockCtx,
            );
            // Should fall back to idGenFunc returning 'DEFAULT_TABLE'
            expect(id).toBe('DEFAULT_TABLE');
            expect(warnSpy).toHaveBeenCalledWith(
                `Passed key UnsupportedKey for AWS::DynamoDB::Table, with logicalId=TestLogicalId is not supported, id will be returned`,
                resource,
                mockCtx,
            );
            warnSpy.mockRestore();
        });
    });

    describe('arnGenFunc', () => {
        it('should generate and assign a new ARN if none exists', () => {
            const arn = awsDynamoDbTableFunc.arnGenFunc('AWS::DynamoDB::Table', 'TestLogicalId', resource, mockCtx);
            // idGenFunc returns 'DEFAULT_TABLE', so the ARN is constructed as:
            // arn:{partition}:dynamodb:{region}:{accountId}:table/{tableName}
            const expectedArn = 'arn:aws:dynamodb:us-west-2:111122223333:table/DEFAULT_TABLE';
            expect(arn).toBe(expectedArn);
            expect(resource._arn).toBe(expectedArn);
        });

        it('should return the existing ARN if it is already set', () => {
            resource._arn = 'existingArn';
            const arn = awsDynamoDbTableFunc.arnGenFunc('AWS::DynamoDB::Table', 'TestLogicalId', resource, mockCtx);
            expect(arn).toBe('existingArn');
        });
    });
});
