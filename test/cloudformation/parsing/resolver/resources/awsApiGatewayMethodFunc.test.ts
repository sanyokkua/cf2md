import log from 'loglevel';
import { awsApiGatewayMethodFunc } from '../../../../../src/cloudformation/parsing/resolver/resources/awsApiGatewayMethodFunc';
import { ResolvingContext } from '../../../../../src/cloudformation/parsing/types/types';
import { generateAlphaNumeric, resolveString } from '../../../../../src/cloudformation/parsing/utils/helper-utils';
import { CloudFormationResource } from '../../../../../src/cloudformation/types/cloudformation-model';

// Mock helper functions
jest.mock('../../../../../src/cloudformation/parsing/utils/helper-utils', () => ({
    generateAlphaNumeric: jest.fn(() => 'MOCKED_ID'),
    resolveString: jest.fn((_value: unknown, _propertyName: string, _ctx: ResolvingContext) => 'resolvedValue'),
}));

/**
 * Creates a mock resolving context for testing.
 */
function createMockContext(): ResolvingContext {
    return {
        originalTemplate: {},
        lookupMapPreProcessed: {},
        generatedIds: new Set(),
        lookupMapDynamic: {},
        currentPath: [],
        addName: jest.fn(),
        popName: jest.fn(() => ''),
        getCurrentPath: jest.fn(() => ''),
        hasParameterName: jest.fn(() => false),
        getParameter: jest.fn(),
        addParameter: jest.fn(),
        addGeneratedId: jest.fn(),
        isIdExists: jest.fn(() => false),
        getRegion: jest.fn(() => 'us-east-1'),
        getPartition: jest.fn(() => 'aws'),
        getAccountId: jest.fn(() => '123456789012'),
        getAZs: jest.fn(() => ['us-east-1a', 'us-east-1b']),
    } as unknown as ResolvingContext;
}

describe('awsApiGatewayMethodFunc', () => {
    let mockCtx: ResolvingContext;
    let resource: CloudFormationResource;

    beforeEach(() => {
        mockCtx = createMockContext();

        resource = {
            Properties: {
                RestApiId: 'dummyRestApiId',
                ResourceId: 'dummyResourceId',
                HttpMethod: 'GET',
            },
        } as CloudFormationResource;

        delete resource._id;
        delete resource._arn;

        (generateAlphaNumeric as jest.Mock).mockClear();
        (resolveString as jest.Mock).mockClear();
    });

    describe('idGenFunc', () => {
        it('should generate a new ID if not already set', () => {
            const id = awsApiGatewayMethodFunc.idGenFunc('AWS::ApiGateway::Method', 'TestLogicalId', resource, mockCtx);

            expect(id).toBe('TestLogicalId');
            expect(resource._id).toBe('TestLogicalId');
        });

        it('should return the existing ID if already set', () => {
            resource._id = 'existingId';
            const id = awsApiGatewayMethodFunc.idGenFunc('AWS::ApiGateway::Method', 'TestLogicalId', resource, mockCtx);

            expect(id).toBe('existingId');
        });
    });

    describe('refFunc', () => {
        it('should return the ID generated by idGenFunc', () => {
            const id = awsApiGatewayMethodFunc.refFunc('AWS::ApiGateway::Method', 'TestLogicalId', resource, mockCtx);

            expect(id).toBe('TestLogicalId');
        });
    });

    describe('getAttFunc', () => {
        it('should return the ID when an attribute is requested', () => {
            const id = awsApiGatewayMethodFunc.getAttFunc(
                'AWS::ApiGateway::Method',
                'SomeAttribute',
                'TestLogicalId',
                resource,
                mockCtx,
            );

            expect(id).toBe('TestLogicalId');
        });

        it('should warn and return the ID when an unsupported attribute is passed', () => {
            const warnSpy = jest.spyOn(log, 'warn').mockImplementation(() => {});

            const id = awsApiGatewayMethodFunc.getAttFunc(
                'AWS::ApiGateway::Method',
                'UnsupportedAttribute',
                'TestLogicalId',
                resource,
                mockCtx,
            );

            expect(id).toBe('TestLogicalId');
            expect(warnSpy).toHaveBeenCalledWith(
                `Passed key UnsupportedAttribute for AWS::ApiGateway::Method, with logicalId=TestLogicalId is not supported, id will be returned`,
                resource,
                mockCtx,
            );

            warnSpy.mockRestore();
        });
    });

    describe('arnGenFunc', () => {
        it('should generate and assign a new ARN if none exists', () => {
            const arn = awsApiGatewayMethodFunc.arnGenFunc(
                'AWS::ApiGateway::Method',
                'TestLogicalId',
                resource,
                mockCtx,
            );

            expect(resolveString).toHaveBeenCalledWith(
                'dummyRestApiId',
                'AWS::ApiGateway::Method.Properties.RestApiId',
                mockCtx,
            );
            expect(resolveString).toHaveBeenCalledWith(
                'dummyResourceId',
                'AWS::ApiGateway::Method.Properties.ResourceId',
                mockCtx,
            );
            expect(resolveString).toHaveBeenCalledWith('GET', 'AWS::ApiGateway::Method.Properties.HttpMethod', mockCtx);

            expect(arn).toBe(
                'arn:aws:apigateway:us-east-1::/restapis/resolvedValue/resources/resolvedValue/methods/resolvedValue',
            );
            expect(resource._arn).toBe(arn);
        });

        it('should return the existing ARN if it is already set', () => {
            resource._arn = 'existingArn';
            const arn = awsApiGatewayMethodFunc.arnGenFunc(
                'AWS::ApiGateway::Method',
                'TestLogicalId',
                resource,
                mockCtx,
            );

            expect(arn).toBe('existingArn');
        });
    });
});
