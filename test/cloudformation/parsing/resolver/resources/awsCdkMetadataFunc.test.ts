import log from 'loglevel';
import { awsCdkMetadataFunc } from '../../../../../src/cloudformation/parsing/resolver/resources/awsCdkMetadataFunc';
import { ResolvingContext } from '../../../../../src/cloudformation/parsing/types/types';
import { CloudFormationResource } from '../../../../../src/cloudformation/types/cloudformation-model';

/**
 * Creates a fresh mock ResolvingContext for testing.
 *
 * @returns A mock ResolvingContext.
 */
function createMockContext(): ResolvingContext {
    return {
        originalTemplate: {},
        lookupMapPreProcessed: {},
        generatedIds: new Set(),
        lookupMapDynamic: {},
        currentPath: [],
        addName: jest.fn(),
        popName: jest.fn(() => ''),
        getCurrentPath: jest.fn(() => ''),
        hasParameterName: jest.fn(() => false),
        getParameter: jest.fn(),
        addParameter: jest.fn(),
        addGeneratedId: jest.fn(),
        isIdExists: jest.fn(() => false),
        getRegion: jest.fn(() => 'us-east-1'),
        getPartition: jest.fn(() => 'aws'),
        getAccountId: jest.fn(() => '123456789012'),
        getAZs: jest.fn(() => ['us-east-1a', 'us-east-1b']),
    } as unknown as ResolvingContext;
}

describe('awsCdkMetadataFunc', () => {
    let mockCtx: ResolvingContext;
    let resource: CloudFormationResource;

    beforeEach(() => {
        // Create a fresh mock context and resource for every test.
        mockCtx = createMockContext();
        resource = {
            Properties: {},
        } as CloudFormationResource;

        // Ensure _id and _arn are not preset.
        delete resource._id;
        delete resource._arn;
    });

    describe('idGenFunc', () => {
        it('should generate a new ID if not already set', () => {
            const logicalId = 'TestLogicalId';
            const id = awsCdkMetadataFunc.idGenFunc('AWS::CDK::Metadata', logicalId, resource, mockCtx);
            expect(id).toBe(logicalId);
            expect(resource._id).toBe(logicalId);
        });

        it('should return the existing ID if already set', () => {
            resource._id = 'existingId';
            const id = awsCdkMetadataFunc.idGenFunc('AWS::CDK::Metadata', 'TestLogicalId', resource, mockCtx);
            expect(id).toBe('existingId');
        });
    });

    describe('refFunc', () => {
        it('should return the ID generated by idGenFunc', () => {
            const logicalId = 'TestLogicalId';
            const id = awsCdkMetadataFunc.refFunc('AWS::CDK::Metadata', logicalId, resource, mockCtx);
            expect(id).toBe(logicalId);
        });
    });

    describe('getAttFunc', () => {
        it('should return the ID when any attribute is requested and log a warning', () => {
            const logicalId = 'TestLogicalId';
            const warnSpy = jest.spyOn(log, 'warn').mockImplementation(() => {});
            const id = awsCdkMetadataFunc.getAttFunc('AWS::CDK::Metadata', 'AnyKey', logicalId, resource, mockCtx);
            expect(id).toBe(logicalId);
            expect(warnSpy).toHaveBeenCalledWith(
                `Passed key AnyKey for AWS::CDK::Metadata, with logicalId=${logicalId} is not supported, id will be returned`,
                resource,
                mockCtx,
            );
            warnSpy.mockRestore();
        });
    });

    describe('arnGenFunc', () => {
        it('should generate and assign a new ARN if none exists', () => {
            const logicalId = 'TestLogicalId';
            // Context returns partition 'aws' and accountId '123456789012'
            const arn = awsCdkMetadataFunc.arnGenFunc('AWS::CDK::Metadata', logicalId, resource, mockCtx);
            const expectedArn = `arn:aws:cdk::123456789012:${logicalId}`;
            expect(arn).toBe(expectedArn);
            expect(resource._arn).toBe(expectedArn);
        });

        it('should return the existing ARN if it is already set', () => {
            resource._arn = 'existingArn';
            const arn = awsCdkMetadataFunc.arnGenFunc('AWS::CDK::Metadata', 'TestLogicalId', resource, mockCtx);
            expect(arn).toBe('existingArn');
        });
    });
});
