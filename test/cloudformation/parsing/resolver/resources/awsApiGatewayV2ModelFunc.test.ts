import log from 'loglevel';
import { awsApiGatewayV2ModelFunc } from '../../../../../src/cloudformation/parsing/resolver/resources/awsApiGatewayV2ModelFunc';
import { ResolvingContext } from '../../../../../src/cloudformation/parsing/types/types';
import { generateAlphaNumeric, resolveString } from '../../../../../src/cloudformation/parsing/utils/helper-utils';
import { CloudFormationResource } from '../../../../../src/cloudformation/types/cloudformation-model';

// Mock helper functions so we control their outputs.
jest.mock('../../../../../src/cloudformation/parsing/utils/helper-utils', () => ({
    generateAlphaNumeric: jest.fn(() => 'MOCKED_ID'),
    resolveString: jest.fn((_value: unknown, _propertyName: string, _ctx: ResolvingContext) => 'resolvedApiId'),
}));

/**
 * Creates a fresh mock ResolvingContext for testing.
 *
 * @returns A mock ResolvingContext.
 */
function createMockContext(): ResolvingContext {
    return {
        originalTemplate: {},
        lookupMapPreProcessed: {},
        generatedIds: new Set(),
        lookupMapDynamic: {},
        currentPath: [],
        addName: jest.fn(),
        popName: jest.fn(() => ''),
        getCurrentPath: jest.fn(() => ''),
        hasParameterName: jest.fn(() => false),
        getParameter: jest.fn(),
        addParameter: jest.fn(),
        addGeneratedId: jest.fn(),
        isIdExists: jest.fn(() => false),
        getRegion: jest.fn(() => 'us-east-1'),
        getPartition: jest.fn(() => 'aws'),
        getAccountId: jest.fn(() => '123456789012'),
        getAZs: jest.fn(() => ['us-east-1a', 'us-east-1b']),
    } as unknown as ResolvingContext;
}

describe('awsApiGatewayV2ModelFunc', () => {
    let mockCtx: ResolvingContext;
    let resource: CloudFormationResource;

    beforeEach(() => {
        // Create a fresh mock context and resource before each test.
        mockCtx = createMockContext();
        resource = {
            Properties: {
                ApiId: 'dummyApiId',
            },
        } as CloudFormationResource;

        // Ensure that _id and _arn are not preset.
        delete resource._id;
        delete resource._arn;

        // Clear previous calls on the mocked helper functions.
        (generateAlphaNumeric as jest.Mock).mockClear();
        (resolveString as jest.Mock).mockClear();
    });

    describe('idGenFunc', () => {
        it('should generate a new ID if not already set', () => {
            const id = awsApiGatewayV2ModelFunc.idGenFunc(
                'AWS::ApiGatewayV2::Model',
                'TestLogicalId',
                resource,
                mockCtx,
            );

            expect(id).toBe('MOCKED_ID');
            expect(resource._id).toBe('MOCKED_ID');
            // Verify that generateAlphaNumeric was called with a length of 6 and the mock context.
            expect(generateAlphaNumeric).toHaveBeenCalledWith(6, mockCtx);
        });

        it('should return the existing ID if already set', () => {
            resource._id = 'existingId';
            const id = awsApiGatewayV2ModelFunc.idGenFunc(
                'AWS::ApiGatewayV2::Model',
                'TestLogicalId',
                resource,
                mockCtx,
            );

            expect(id).toBe('existingId');
            // When the ID is already present, generateAlphaNumeric should not be called.
            expect(generateAlphaNumeric).not.toHaveBeenCalled();
        });
    });

    describe('refFunc', () => {
        it('should return the ID generated by idGenFunc', () => {
            const id = awsApiGatewayV2ModelFunc.refFunc('AWS::ApiGatewayV2::Model', 'TestLogicalId', resource, mockCtx);
            expect(id).toBe('MOCKED_ID');
        });
    });

    describe('getAttFunc', () => {
        it('should return the ID when key is "ModelId"', () => {
            const id = awsApiGatewayV2ModelFunc.getAttFunc(
                'AWS::ApiGatewayV2::Model',
                'ModelId',
                'TestLogicalId',
                resource,
                mockCtx,
            );
            expect(id).toBe('MOCKED_ID');
        });

        it('should warn and return the ID when an unsupported key is passed', () => {
            const warnSpy = jest.spyOn(log, 'warn').mockImplementation(() => {});
            const id = awsApiGatewayV2ModelFunc.getAttFunc(
                'AWS::ApiGatewayV2::Model',
                'UnsupportedKey',
                'TestLogicalId',
                resource,
                mockCtx,
            );
            expect(id).toBe('MOCKED_ID');
            expect(warnSpy).toHaveBeenCalledWith(
                `Passed key UnsupportedKey for AWS::ApiGatewayV2::Model, with logicalId=TestLogicalId is not supported, id will be returned`,
                resource,
                mockCtx,
            );
            warnSpy.mockRestore();
        });
    });

    describe('arnGenFunc', () => {
        it('should generate and assign a new ARN if none exists', () => {
            const arn = awsApiGatewayV2ModelFunc.arnGenFunc(
                'AWS::ApiGatewayV2::Model',
                'TestLogicalId',
                resource,
                mockCtx,
            );

            // Verify that resolveString was called to resolve the ApiId property.
            expect(resolveString).toHaveBeenCalledWith(
                'dummyApiId',
                'AWS::ApiGatewayV2::Model.Properties.ApiId',
                mockCtx,
            );

            // Expected ARN format: arn:{partition}:apigateway:{region}::/apis/{resolvedApiId}/models/{id}
            const expectedArn = 'arn:aws:apigateway:us-east-1::/apis/resolvedApiId/models/MOCKED_ID';
            expect(arn).toBe(expectedArn);
            expect(resource._arn).toBe(expectedArn);
        });

        it('should return the existing ARN if it is already set', () => {
            resource._arn = 'existingArn';
            const arn = awsApiGatewayV2ModelFunc.arnGenFunc(
                'AWS::ApiGatewayV2::Model',
                'TestLogicalId',
                resource,
                mockCtx,
            );
            expect(arn).toBe('existingArn');
        });
    });
});
