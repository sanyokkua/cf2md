import log from 'loglevel';
import { awsLambdaPermissionFunc } from '../../../../../src/cloudformation/parsing/resolver/resources/awsLambdaPermissionFunc';
import { ResolvingContext } from '../../../../../src/cloudformation/parsing/types/types';
import { shortUuid } from '../../../../../src/cloudformation/parsing/utils/helper-utils';
import { CloudFormationResource } from '../../../../../src/cloudformation/types/cloudformation-model';

// Mock helper functions so that we can control their outputs and verify their usage.
jest.mock('../../../../../src/cloudformation/parsing/utils/helper-utils', () => ({
    generateAlphaNumeric: jest.fn(() => 'MOCKED_ID'),
    resolveStringWithDefault: jest.fn(
        (_value: unknown, _defaultValue: string, _propertyName: string, _ctx: ResolvingContext) =>
            'resolvedFunctionName',
    ),
    shortUuid: jest.fn((_value: unknown, _propertyName: string, _ctx: ResolvingContext) => 'MOCKED_UUID'),
}));

/**
 * Helper function to create a fresh mock ResolvingContext.
 * @returns A mock ResolvingContext object.
 */
function createMockContext(): ResolvingContext {
    return {
        originalTemplate: {},
        lookupMapPreProcessed: {},
        generatedIds: new Set(),
        lookupMapDynamic: {},
        currentPath: [],
        addName: jest.fn(),
        popName: jest.fn(() => ''),
        getCurrentPath: jest.fn(() => ''),
        hasParameterName: jest.fn(() => false),
        getParameter: jest.fn(),
        addParameter: jest.fn(),
        addGeneratedId: jest.fn(),
        isIdExists: jest.fn(() => false),
        getRegion: jest.fn(() => 'us-east-1'),
        getPartition: jest.fn(() => 'aws'),
        getAccountId: jest.fn(() => '123456789012'),
        getAZs: jest.fn(() => ['us-east-1a', 'us-east-1b']),
    } as unknown as ResolvingContext;
}

describe('awsLambdaPermissionFunc', () => {
    let mockCtx: ResolvingContext;
    let resource: CloudFormationResource;

    beforeEach(() => {
        // Create a fresh mock context and resource for every test.
        mockCtx = createMockContext();
        resource = {
            Properties: {},
        } as CloudFormationResource;

        // Ensure _id and _arn are not preset.
        delete resource._id;
        delete resource._arn;

        // Clear calls on the shortUuid mock.
        (shortUuid as jest.Mock).mockClear();
    });

    describe('idGenFunc', () => {
        it('should generate a new ID if not already set', () => {
            const id = awsLambdaPermissionFunc.idGenFunc('AWS::Lambda::Permission', 'TestLogicalId', resource, mockCtx);
            expect(id).toBe('lambda-permission-MOCKED_UUID');
            expect(resource._id).toBe('lambda-permission-MOCKED_UUID');
            expect(shortUuid).toHaveBeenCalledWith(mockCtx);
        });

        it('should return the existing ID if already set', () => {
            resource._id = 'existingId';
            const id = awsLambdaPermissionFunc.idGenFunc('AWS::Lambda::Permission', 'TestLogicalId', resource, mockCtx);
            expect(id).toBe('existingId');
            // When _id exists, the helper should not be called.
            expect(shortUuid).not.toHaveBeenCalled();
        });
    });

    describe('refFunc', () => {
        it('should return the ID generated by idGenFunc', () => {
            // refFunc delegates to idGenFunc.
            const id = awsLambdaPermissionFunc.refFunc('AWS::Lambda::Permission', 'TestLogicalId', resource, mockCtx);
            expect(id).toBe('lambda-permission-MOCKED_UUID');
        });
    });

    describe('getAttFunc', () => {
        it('should warn and return the ID when an unsupported attribute key is passed', () => {
            const warnSpy = jest.spyOn(log, 'warn').mockImplementation(() => {});

            const id = awsLambdaPermissionFunc.getAttFunc(
                'AWS::Lambda::Permission',
                'UnsupportedKey',
                'TestLogicalId',
                resource,
                mockCtx,
            );
            expect(id).toBe('lambda-permission-MOCKED_UUID');
            expect(warnSpy).toHaveBeenCalledWith(
                'Passed key UnsupportedKey for AWS::Lambda::Permission, with logicalId=TestLogicalId is not supported, id will be returned',
                resource,
                mockCtx,
            );
            warnSpy.mockRestore();
        });
    });

    describe('arnGenFunc', () => {
        it('should generate and assign a new ARN if none exists', () => {
            const arn = awsLambdaPermissionFunc.arnGenFunc(
                'AWS::Lambda::Permission',
                'TestLogicalId',
                resource,
                mockCtx,
            );

            // Expected ARN format: arn:{partition}:lambda:{region}:{accountId}:permission:{id}
            const expectedArn = `arn:aws:lambda:us-east-1:123456789012:permission:lambda-permission-MOCKED_UUID`;
            expect(arn).toBe(expectedArn);
            expect(resource._arn).toBe(expectedArn);

            // Verify that context methods for region, partition, and account are called.
            expect(mockCtx.getRegion).toHaveBeenCalled();
            expect(mockCtx.getPartition).toHaveBeenCalled();
            expect(mockCtx.getAccountId).toHaveBeenCalled();
        });

        it('should return the existing ARN if it is already set', () => {
            resource._arn = 'existingArn';
            const arn = awsLambdaPermissionFunc.arnGenFunc(
                'AWS::Lambda::Permission',
                'TestLogicalId',
                resource,
                mockCtx,
            );
            expect(arn).toBe('existingArn');
        });
    });
});
