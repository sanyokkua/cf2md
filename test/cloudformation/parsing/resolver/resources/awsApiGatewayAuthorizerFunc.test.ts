import log from 'loglevel';
import { awsApiGatewayAuthorizerFunc } from '../../../../../src/cloudformation/parsing/resolver/resources/awsApiGatewayAuthorizerFunc'; // adjust path as needed
import { ResolvingContext } from '../../../../../src/cloudformation/parsing/types/types';
import { generateAlphaNumeric, resolveString } from '../../../../../src/cloudformation/parsing/utils/helper-utils';
import { CloudFormationResource } from '../../../../../src/cloudformation/types/cloudformation-model';

// We mock these so we can control their outputs and verify how they are used.
jest.mock('../../../../../src/cloudformation/parsing/utils/helper-utils', () => ({
    generateAlphaNumeric: jest.fn(() => 'MOCKED_ID'),
    resolveString: jest.fn((_value: unknown, _propertyName: string, _ctx: ResolvingContext) => 'resolvedRestApiId'),
}));

// In many tests across modules you might define a helper function such as:
function createMockContext(): ResolvingContext {
    return {
        originalTemplate: {},
        lookupMapPreProcessed: {},
        generatedIds: new Set(),
        lookupMapDynamic: {},
        currentPath: [],
        addName: jest.fn(),
        popName: jest.fn(() => ''),
        getCurrentPath: jest.fn(() => ''),
        hasParameterName: jest.fn(() => false),
        getParameter: jest.fn(),
        addParameter: jest.fn(),
        addGeneratedId: jest.fn(),
        isIdExists: jest.fn(() => false),
        getRegion: jest.fn(() => 'us-east-1'),
        getPartition: jest.fn(() => 'aws'),
        getAccountId: jest.fn(() => '123456789012'),
        getAZs: jest.fn(() => ['us-east-1a', 'us-east-1b']),
    } as unknown as ResolvingContext;
}

describe('awsApiGatewayAuthorizerFunc', () => {
    let mockCtx: ResolvingContext;
    let resource: CloudFormationResource;

    beforeEach(() => {
        // Create fresh mock context & resource for every test.
        mockCtx = createMockContext();

        // A basic resource mock. Depending on the test you can extend this object.
        resource = {
            Properties: {
                RestApiId: 'dummyRestApiId',
            },
        } as CloudFormationResource;

        // Ensure _id and _arn are not preset.
        delete resource._id;
        delete resource._arn;

        // Clear any previous calls on helper mocks.
        (generateAlphaNumeric as jest.Mock).mockClear();
        (resolveString as jest.Mock).mockClear();
    });

    describe('idGenFunc', () => {
        it('should generate a new ID if not already set', () => {
            const id = awsApiGatewayAuthorizerFunc.idGenFunc(
                'AWS::ApiGateway::Authorizer',
                'TestLogicalId',
                resource,
                mockCtx,
            );

            expect(id).toBe('MOCKED_ID');
            expect(resource._id).toBe('MOCKED_ID');
            expect(generateAlphaNumeric).toHaveBeenCalledWith(10, mockCtx);
        });

        it('should return the existing ID if already set', () => {
            resource._id = 'existingId';
            const id = awsApiGatewayAuthorizerFunc.idGenFunc(
                'AWS::ApiGateway::Authorizer',
                'TestLogicalId',
                resource,
                mockCtx,
            );

            expect(id).toBe('existingId');
            // When the ID is already present, helper is not called.
            expect(generateAlphaNumeric).not.toHaveBeenCalled();
        });
    });

    describe('refFunc', () => {
        it('should return the ID generated by idGenFunc', () => {
            const id = awsApiGatewayAuthorizerFunc.refFunc(
                'AWS::ApiGateway::Authorizer',
                'TestLogicalId',
                resource,
                mockCtx,
            );

            expect(id).toBe('MOCKED_ID');
        });
    });

    describe('getAttFunc', () => {
        it('should return the ID when key is "AuthorizerId"', () => {
            const id = awsApiGatewayAuthorizerFunc.getAttFunc(
                'AWS::ApiGateway::Authorizer',
                'AuthorizerId',
                'TestLogicalId',
                resource,
                mockCtx,
            );

            expect(id).toBe('MOCKED_ID');
        });

        it('should warn and return the ID when an unsupported key is passed', () => {
            const warnSpy = jest.spyOn(log, 'warn').mockImplementation(() => {});

            const id = awsApiGatewayAuthorizerFunc.getAttFunc(
                'AWS::ApiGateway::Authorizer',
                'UnsupportedKey',
                'TestLogicalId',
                resource,
                mockCtx,
            );

            expect(id).toBe('MOCKED_ID');
            expect(warnSpy).toHaveBeenCalledWith(
                `Passed key UnsupportedKey for AWS::ApiGateway::Authorizer, with logicalId=TestLogicalId is not supported, id will be returned`,
                resource,
                mockCtx,
            );

            warnSpy.mockRestore();
        });
    });

    describe('arnGenFunc', () => {
        it('should generate and assign a new ARN if none exists', () => {
            // At this point resource._arn is undefined.
            const arn = awsApiGatewayAuthorizerFunc.arnGenFunc(
                'AWS::ApiGateway::Authorizer',
                'TestLogicalId',
                resource,
                mockCtx,
            );

            // Verify that resolveString was used to resolve the RestApiId.
            expect(resolveString).toHaveBeenCalledWith('dummyRestApiId', 'resTyped.Properties.RestApiId', mockCtx);

            // Expected ARN format: arn:{partition}:apigateway:{region}::/restapis/{resolvedRestApiId}/authorizers/{id}
            expect(arn).toBe('arn:aws:apigateway:us-east-1::/restapis/resolvedRestApiId/authorizers/MOCKED_ID');
            expect(resource._arn).toBe(arn);
        });

        it('should return the existing ARN if it is already set', () => {
            resource._arn = 'existingArn';
            const arn = awsApiGatewayAuthorizerFunc.arnGenFunc(
                'AWS::ApiGateway::Authorizer',
                'TestLogicalId',
                resource,
                mockCtx,
            );

            expect(arn).toBe('existingArn');
        });
    });
});
