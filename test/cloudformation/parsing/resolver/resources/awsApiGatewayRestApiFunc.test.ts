import log from 'loglevel';
import { awsApiGatewayRestApiFunc } from '../../../../../src/cloudformation/parsing/resolver/resources/awsApiGatewayRestApiFunc';
import { ResolvingContext } from '../../../../../src/cloudformation/parsing/types/types';
import { generateAlphaNumeric } from '../../../../../src/cloudformation/parsing/utils/helper-utils';
import { CloudFormationResource } from '../../../../../src/cloudformation/types/cloudformation-model';

jest.mock('../../../../../src/cloudformation/parsing/utils/helper-utils', () => ({
    generateAlphaNumeric: jest.fn(() => 'MOCKED_ID'),
    resolveString: jest.fn((_value, _prop, _ctx) => 'resolvedRestApiId'),
}));

// Helper function to create a mock ResolvingContext
function createMockContext(): ResolvingContext {
    return {
        originalTemplate: {},
        lookupMapPreProcessed: {},
        generatedIds: new Set(),
        lookupMapDynamic: {},
        currentPath: '',
        addName: jest.fn(),
        popName: jest.fn(() => ''),
        getCurrentPath: jest.fn(() => ''),
        hasParameterName: jest.fn(() => false),
        getParameter: jest.fn(),
        addParameter: jest.fn(),
        addGeneratedId: jest.fn(),
        isIdExists: jest.fn(() => false),
        getRegion: jest.fn(() => 'us-east-1'),
        getPartition: jest.fn(() => 'aws'),
        getAccountId: jest.fn(() => '123456789012'),
        getAZs: jest.fn(() => ['us-east-1a', 'us-east-1b']),
    } as unknown as ResolvingContext;
}

describe('awsApiGatewayRestApiFunc', () => {
    let mockCtx: ResolvingContext;
    let resource: CloudFormationResource;

    beforeEach(() => {
        // Create a new mock context for each test
        mockCtx = createMockContext();

        // Basic resource object
        resource = {
            Properties: {},
        } as CloudFormationResource;

        // Ensure _id and _arn are not set before each test
        delete resource._id;
        delete resource._arn;

        // Clear mock calls
        (generateAlphaNumeric as jest.Mock).mockClear();
    });

    describe('idGenFunc', () => {
        it('should generate a new ID if _id is not already set', () => {
            const id = awsApiGatewayRestApiFunc.idGenFunc('AWS::ApiGateway::RestApi', 'TestRestApi', resource, mockCtx);

            expect(id).toBe('MOCKED_ID');
            expect(resource._id).toBe('MOCKED_ID');
            expect(generateAlphaNumeric).toHaveBeenCalledWith(10, mockCtx);
        });

        it('should return the existing _id if it is already set', () => {
            resource._id = 'existingRestApiId';
            const id = awsApiGatewayRestApiFunc.idGenFunc('AWS::ApiGateway::RestApi', 'TestRestApi', resource, mockCtx);

            expect(id).toBe('existingRestApiId');
            expect(generateAlphaNumeric).not.toHaveBeenCalled();
        });
    });

    describe('refFunc', () => {
        it('should return the ID generated by idGenFunc', () => {
            const ref = awsApiGatewayRestApiFunc.refFunc('AWS::ApiGateway::RestApi', 'TestRestApi', resource, mockCtx);

            expect(ref).toBe('MOCKED_ID');
        });
    });

    describe('getAttFunc', () => {
        it('should return the RestApi ID when the key is "RestApiId"', () => {
            const att = awsApiGatewayRestApiFunc.getAttFunc(
                'AWS::ApiGateway::RestApi',
                'RestApiId',
                'TestRestApi',
                resource,
                mockCtx,
            );

            expect(att).toBe('MOCKED_ID');
        });

        it('should return a placeholder for "RootResourceId"', () => {
            const att = awsApiGatewayRestApiFunc.getAttFunc(
                'AWS::ApiGateway::RestApi',
                'RootResourceId',
                'TestRestApi',
                resource,
                mockCtx,
            );

            expect(att).toBe('RUNTIME_RootResourceId');
        });

        it('should warn and return the ID for an unsupported attribute key', () => {
            const warnSpy = jest.spyOn(log, 'warn').mockImplementation(() => {});

            const att = awsApiGatewayRestApiFunc.getAttFunc(
                'AWS::ApiGateway::RestApi',
                'UnsupportedAttribute',
                'TestRestApi',
                resource,
                mockCtx,
            );

            expect(att).toBe('MOCKED_ID');
            expect(warnSpy).toHaveBeenCalledWith(
                'Passed key UnsupportedAttribute for AWS::ApiGateway::RestApi, with logicalId=TestRestApi is not supported, id will be returned',
                resource,
                mockCtx,
            );

            warnSpy.mockRestore();
        });
    });

    describe('arnGenFunc', () => {
        it('should generate and set a new ARN if _arn is not already set', () => {
            const arn = awsApiGatewayRestApiFunc.arnGenFunc(
                'AWS::ApiGateway::RestApi',
                'TestRestApi',
                resource,
                mockCtx,
            );

            expect(arn).toBe('arn:aws:apigateway:us-east-1::/restapis/MOCKED_ID');
            expect(resource._arn).toBe('arn:aws:apigateway:us-east-1::/restapis/MOCKED_ID');
        });

        it('should return the existing _arn if it is already set', () => {
            resource._arn = 'existingRestApiArn';
            const arn = awsApiGatewayRestApiFunc.arnGenFunc(
                'AWS::ApiGateway::RestApi',
                'TestRestApi',
                resource,
                mockCtx,
            );

            expect(arn).toBe('existingRestApiArn');
        });

        it('should construct the ARN with the correct partition, region, and RestApi ID', () => {
            (mockCtx.getPartition as jest.Mock).mockReturnValue('aws-cn');
            (mockCtx.getRegion as jest.Mock).mockReturnValue('cn-north-1');

            const arn = awsApiGatewayRestApiFunc.arnGenFunc(
                'AWS::ApiGateway::RestApi',
                'TestRestApi',
                resource,
                mockCtx,
            );

            expect(arn).toBe('arn:aws-cn:apigateway:cn-north-1::/restapis/MOCKED_ID');
        });
    });
});
