import log from 'loglevel';
import { awsSnsTopicPolicyFunc } from '../../../../../src/cloudformation/parsing/resolver/resources/awsSnsTopicPolicyFunc';
import { ResolvingContext } from '../../../../../src/cloudformation/parsing/types/types';
import { generateAlphaNumeric } from '../../../../../src/cloudformation/parsing/utils/helper-utils';
import { CloudFormationResource } from '../../../../../src/cloudformation/types/cloudformation-model';

// Mock helper functions so we control their outputs.
jest.mock('../../../../../src/cloudformation/parsing/utils/helper-utils', () => ({
    generateAlphaNumeric: jest.fn(() => 'MOCKED_ID'),
}));

/**
 * Creates a fresh mock ResolvingContext for testing.
 *
 * @returns A mock ResolvingContext.
 */
function createMockContext(): ResolvingContext {
    return {
        originalTemplate: {},
        lookupMapPreProcessed: {},
        generatedIds: new Set(),
        lookupMapDynamic: {},
        currentPath: [],
        addName: jest.fn(),
        popName: jest.fn(() => ''),
        getCurrentPath: jest.fn(() => ''),
        hasParameterName: jest.fn(() => false),
        getParameter: jest.fn(),
        addParameter: jest.fn(),
        addGeneratedId: jest.fn(),
        isIdExists: jest.fn(() => false),
        getRegion: jest.fn(() => 'us-east-1'),
        getPartition: jest.fn(() => 'aws'),
        getAccountId: jest.fn(() => '123456789012'),
        getAZs: jest.fn(() => ['us-east-1a', 'us-east-1b']),
    } as unknown as ResolvingContext;
}

describe('awsSnsTopicPolicyFunc', () => {
    let mockCtx: ResolvingContext;
    let resource: CloudFormationResource;

    beforeEach(() => {
        // Create fresh mock context & resource for every test.
        mockCtx = createMockContext();
        resource = {
            Properties: {
                // For SNS Topic Policy, no resource-specific property is required,
                // so idGenFunc will simply generate an ID using generateAlphaNumeric.
            },
        } as CloudFormationResource;

        // Ensure _id and _arn are not preset.
        delete resource._id;
        delete resource._arn;

        // Clear previous calls on helper mocks.
        (generateAlphaNumeric as jest.Mock).mockClear();
    });

    describe('idGenFunc', () => {
        it('should generate a new ID if not already set', () => {
            const id = awsSnsTopicPolicyFunc.idGenFunc('AWS::SNS::TopicPolicy', 'TestLogicalId', resource, mockCtx);

            expect(id).toBe('MOCKED_ID');
            expect(resource._id).toBe('MOCKED_ID');
            expect(generateAlphaNumeric).toHaveBeenCalledWith(6, mockCtx);
        });

        it('should return the existing ID if already set', () => {
            resource._id = 'existingPolicyId';
            const id = awsSnsTopicPolicyFunc.idGenFunc('AWS::SNS::TopicPolicy', 'TestLogicalId', resource, mockCtx);

            expect(id).toBe('existingPolicyId');
            expect(generateAlphaNumeric).not.toHaveBeenCalled();
        });
    });

    describe('refFunc', () => {
        it('should return the ID generated by idGenFunc', () => {
            const ref = awsSnsTopicPolicyFunc.refFunc('AWS::SNS::TopicPolicy', 'TestLogicalId', resource, mockCtx);
            // refFunc simply calls idGenFunc.
            expect(ref).toBe(resource._id || 'MOCKED_ID');
        });
    });

    describe('getAttFunc', () => {
        it('should return the ID when key is "Id"', () => {
            const att = awsSnsTopicPolicyFunc.getAttFunc(
                'AWS::SNS::TopicPolicy',
                'Id',
                'TestLogicalId',
                resource,
                mockCtx,
            );
            expect(att).toBe('MOCKED_ID');
        });

        it('should warn and return the ID when an unsupported key is passed', () => {
            const warnSpy = jest.spyOn(log, 'warn').mockImplementation(() => {});
            const att = awsSnsTopicPolicyFunc.getAttFunc(
                'AWS::SNS::TopicPolicy',
                'UnsupportedKey',
                'TestLogicalId',
                resource,
                mockCtx,
            );
            expect(att).toBe('MOCKED_ID');
            expect(warnSpy).toHaveBeenCalledWith(
                `Passed key UnsupportedKey for AWS::SNS::TopicPolicy, with logicalId=TestLogicalId is not supported, id will be returned`,
                resource,
                mockCtx,
            );
            warnSpy.mockRestore();
        });
    });

    describe('arnGenFunc', () => {
        it('should generate and assign a new ARN if none exists', () => {
            const arn = awsSnsTopicPolicyFunc.arnGenFunc('AWS::SNS::TopicPolicy', 'TestLogicalId', resource, mockCtx);
            // Expected ARN format:
            // arn:{partition}:sns:{region}:{accountId}:topicpolicy/{policyId}
            // With our mock context:
            // partition = 'aws', region = 'us-east-1', accountId = '123456789012'
            // And idGenFunc returns 'MOCKED_ID'
            const expectedArn = 'arn:aws:sns:us-east-1:123456789012:topicpolicy/MOCKED_ID';
            expect(arn).toBe(expectedArn);
            expect(resource._arn).toBe(expectedArn);
        });

        it('should return the existing ARN if it is already set', () => {
            resource._arn = 'existingArn';
            const arn = awsSnsTopicPolicyFunc.arnGenFunc('AWS::SNS::TopicPolicy', 'TestLogicalId', resource, mockCtx);
            expect(arn).toBe('existingArn');
        });
    });
});
