import log from 'loglevel';
import { CloudFormationResource, EventsApiDestinationResource } from '../../../types/cloudformation-model';
import { ResolvingContext, ResourceSpecificFunc } from '../../types/types';
import { generateAlphaNumeric, resolveStringWithDefault } from '../../utils/helper-utils';

/**
 * Resource-specific functions for AWS Events API Destination resources.
 *
 * This object provides helper functions to resolve intrinsic references,
 * generate ARNs, and produce unique identifiers for AWS::Events::ApiDestination resources
 * defined in CloudFormation templates. These functions are used by the CloudFormation parser
 * to dynamically resolve resource values based on the resource properties and the current environment
 * (e.g., region, account, partition).
 *
 * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-events-apidestination.html#aws-resource-events-apidestination-return-values
 */
export const awsEventsApiDestinationFunc: ResourceSpecificFunc = {
    /**
     * Resolves the "Ref" intrinsic for an Events API Destination resource.
     *
     * When a CloudFormation template uses the "Ref" intrinsic on an API Destination resource,
     * this function is invoked. It logs the invocation and delegates to the idGenFunc to generate
     * a unique identifier for the resource.
     *
     * @param resourceType - The type of the resource.
     * @param logicalId - The logical ID of the resource as defined in the CloudFormation template.
     * @param resource - The CloudFormation resource object.
     * @param ctx - The resolving context that provides environment details and helper methods.
     * @returns The unique identifier for the API Destination resource.
     */
    refFunc: (
        resourceType: string,
        logicalId: string,
        resource: CloudFormationResource,
        ctx: ResolvingContext,
    ): unknown => {
        log.trace(`Called refFunc, for ${resourceType}, with logicalId=${logicalId}`, resource, ctx);
        // Delegate the reference resolution to idGenFunc.
        return awsEventsApiDestinationFunc.idGenFunc(resourceType, logicalId, resource, ctx);
    },

    /**
     * Resolves an attribute intrinsic ("Fn::GetAtt") for an Events API Destination resource.
     *
     * This function handles attribute retrieval using the "Fn::GetAtt" intrinsic:
     * - If the requested key is "Arn", it returns the ARN generated by arnGenFunc.
     * - For any unsupported attribute key, it logs a warning and returns the unique identifier.
     *
     * @param resourceType - The type of the resource.
     * @param key - The attribute key requested.
     * @param logicalId - The logical ID of the resource.
     * @param resource - The CloudFormation resource object.
     * @param ctx - The resolving context that supplies environment and template data.
     * @returns The resolved attribute value, typically the ARN or unique identifier.
     */
    getAttFunc: (
        resourceType: string,
        key: string,
        logicalId: string,
        resource: CloudFormationResource,
        ctx: ResolvingContext,
    ): unknown => {
        log.trace(`Called getAttFunc, for ${resourceType}, with logicalId=${logicalId}, and key=${key}`, resource, ctx);

        if (key === 'Arn') {
            return awsEventsApiDestinationFunc.arnGenFunc(resourceType, logicalId, resource, ctx);
        }

        // For unsupported attribute keys, log a warning and return the unique identifier.
        log.warn(
            `Passed key ${key} for ${resourceType}, with logicalId=${logicalId} is not supported, id will be returned`,
            resource,
            ctx,
        );
        return awsEventsApiDestinationFunc.idGenFunc(resourceType, logicalId, resource, ctx);
    },

    /**
     * Generates the Amazon Resource Name (ARN) for an Events API Destination resource.
     *
     * Constructs the ARN using the partition, region, and account ID from the context, along with the unique name
     * of the API Destination resource. The generated ARN follows the format:
     *
     *   arn:{partition}:events:{region}:{accountId}:api-destination/{name}
     *
     * If the ARN has not been previously generated, it computes it, caches it on the resource object, and returns it.
     *
     * @param resourceType - The type of the resource.
     * @param logicalId - The logical ID of the resource.
     * @param resource - The CloudFormation resource object.
     * @param ctx - The resolving context supplying region, account, and partition details.
     * @returns The generated ARN as a string.
     */
    arnGenFunc: (
        resourceType: string,
        logicalId: string,
        resource: CloudFormationResource,
        ctx: ResolvingContext,
    ): string => {
        log.trace(`Called arnGenFunc, for ${resourceType}, with logicalId=${logicalId}`, resource, ctx);
        if (!resource._arn) {
            const region = ctx.getRegion();
            const accountId = ctx.getAccountId();
            const partition = ctx.getPartition();
            // Use idGenFunc to determine the unique name of the API Destination.
            const name = awsEventsApiDestinationFunc.idGenFunc(resourceType, logicalId, resource, ctx);
            // Construct the ARN using the standard format for Events API Destination resources.
            resource._arn = `arn:${partition}:events:${region}:${accountId}:api-destination/${name}`;
        }
        return resource._arn;
    },

    /**
     * Generates a unique identifier for an Events API Destination resource.
     *
     * This function checks if the resource already has an assigned identifier (_id). If not, it resolves the
     * resource's "Name" property via resolveStringWithDefault and uses a generated default format if the name
     * is not provided. The identifier is then cached on the resource object and returned.
     *
     * @param resourceType - The type of the resource.
     * @param logicalId - The logical ID from the CloudFormation template.
     * @param resource - The API Destination resource object.
     * @param ctx - The resolving context that provides helper functions.
     * @returns The unique identifier (name) for the API Destination resource.
     */
    idGenFunc: (
        resourceType: string,
        logicalId: string,
        resource: CloudFormationResource,
        ctx: ResolvingContext,
    ): string => {
        log.trace(`Called idGenFunc, for ${resourceType}, with logicalId=${logicalId}`, resource, ctx);
        if (!resource._id) {
            log.trace(`For ${logicalId} with type ${resourceType} id is not set, will be generated`);
            // Cast resource to EventsApiDestinationResource to access its specific properties.
            const resTyped = resource as EventsApiDestinationResource;
            // Generate a default API Destination name using a random alphanumeric string.
            const apiNameDefault = `destination-${generateAlphaNumeric(6, ctx)}`;
            // Resolve the resource's Name property or use the default value if not provided.
            resource._id = resolveStringWithDefault(
                resTyped.Properties.Name,
                apiNameDefault,
                `${resourceType}.Properties.Name`,
                ctx,
            );
        }
        return resource._id;
    },
};
