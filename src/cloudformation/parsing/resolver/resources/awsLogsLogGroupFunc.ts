import log from 'loglevel';
import { CloudFormationResource, LogGroupResource } from '../../../types/cloudformation-model';
import { ResolvingContext, ResourceSpecificFunc } from '../../types/types';
import { generateAlphaNumeric, resolveStringWithDefault } from '../../utils/helper-utils';

/**
 * Resource-specific functions for AWS Logs LogGroup resources.
 *
 * This object provides helper functions for resolving intrinsic references, generating ARNs,
 * and producing unique identifiers for AWS::Logs::LogGroup resources defined in CloudFormation templates.
 * These functions are used by the CloudFormation parser to dynamically compute resource-specific values
 * based on template properties and environment context (e.g., region, account, partition).
 *
 * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html#aws-resource-logs-loggroup-return-values
 */
export const awsLogsLogGroupFunc: ResourceSpecificFunc = {
    /**
     * Resolves the "Ref" intrinsic for an AWS Logs LogGroup resource.
     *
     * This function is invoked when a CloudFormation template references a LogGroup using "Ref".
     * It logs its invocation and delegates to `idGenFunc` to generate the unique identifier (LogGroup name).
     *
     * @param resourceType - The type of the resource.
     * @param logicalId - The logical ID of the resource in the CloudFormation template.
     * @param resource - The CloudFormation resource object representing the LogGroup.
     * @param ctx - The resolving context providing environment details and helper methods.
     * @returns The generated unique identifier (LogGroup name) for the resource.
     */
    refFunc: (
        resourceType: string,
        logicalId: string,
        resource: CloudFormationResource,
        ctx: ResolvingContext,
    ): unknown => {
        log.trace(`Called refFunc, for ${resourceType}, with logicalId=${logicalId}`, resource, ctx);
        // Delegate identifier resolution to idGenFunc.
        return awsLogsLogGroupFunc.idGenFunc(resourceType, logicalId, resource, ctx);
    },

    /**
     * Resolves the "Fn::GetAtt" intrinsic for an AWS Logs LogGroup resource.
     *
     * This function handles attribute resolution requests. For the key "Arn", it returns the
     * LogGroup's ARN generated via `arnGenFunc`. For unsupported keys, it logs a warning and
     * returns the unique identifier generated by `idGenFunc`.
     *
     * @param resourceType - The type of the resource.
     * @param key - The attribute key requested (e.g., "Arn").
     * @param logicalId - The logical ID of the resource.
     * @param resource - The CloudFormation resource object.
     * @param ctx - The resolving context supplying necessary environment data.
     * @returns The resolved attribute value.
     */
    getAttFunc: (
        resourceType: string,
        key: string,
        logicalId: string,
        resource: CloudFormationResource,
        ctx: ResolvingContext,
    ): unknown => {
        log.trace(`Called getAttFunc, for ${resourceType}, with logicalId=${logicalId}, and key=${key}`, resource, ctx);

        if (key === 'Arn') {
            return awsLogsLogGroupFunc.arnGenFunc(resourceType, logicalId, resource, ctx);
        }

        log.warn(
            `Passed key ${key} for ${resourceType}, with logicalId=${logicalId} is not supported, id will be returned`,
            resource,
            ctx,
        );
        return awsLogsLogGroupFunc.idGenFunc(resourceType, logicalId, resource, ctx);
    },

    /**
     * Generates the Amazon Resource Name (ARN) for an AWS Logs LogGroup resource.
     *
     * Constructs the ARN using the partition, region, and account ID from the resolving context,
     * combined with the unique LogGroup name generated via `idGenFunc`. The ARN is constructed as:
     *   arn:{partition}:logs:{region}:{accountId}:log-group:{logGroupName}:*
     * The generated ARN is then cached on the resource object to prevent redundant computations.
     *
     * @param resourceType - The type of the resource.
     * @param logicalId - The logical ID from the CloudFormation template.
     * @param resource - The CloudFormation resource object representing the LogGroup.
     * @param ctx - The resolving context providing environment-specific details.
     * @returns The generated ARN as a string.
     */
    arnGenFunc: (
        resourceType: string,
        logicalId: string,
        resource: CloudFormationResource,
        ctx: ResolvingContext,
    ): string => {
        log.trace(`Called arnGenFunc, for ${resourceType}, with logicalId=${logicalId}`, resource, ctx);
        if (!resource._arn) {
            const region = ctx.getRegion();
            const accountId = ctx.getAccountId();
            const partition = ctx.getPartition();
            // Retrieve the unique LogGroup name using idGenFunc.
            const logGroupName = awsLogsLogGroupFunc.idGenFunc(resourceType, logicalId, resource, ctx);
            // Construct the ARN with a wildcard suffix.
            resource._arn = `arn:${partition}:logs:${region}:${accountId}:log-group:${logGroupName}:*`;
        }
        return resource._arn;
    },

    /**
     * Generates a unique identifier for an AWS Logs LogGroup resource.
     *
     * This function checks whether the resource already has an assigned unique identifier (_id). If not,
     * it casts the resource as a LogGroupResource to access the LogGroupName property. It then resolves
     * the LogGroupName property using a default value if the property is not defined. The resulting value
     * is cached on the resource for later reuse.
     *
     * @param resourceType - The type of the resource.
     * @param logicalId - The logical ID from the CloudFormation template.
     * @param resource - The CloudFormation resource object for the LogGroup.
     * @param ctx - The resolving context offering helper functions for string resolution.
     * @returns The resolved unique identifier (LogGroup name) as a string.
     */
    idGenFunc: (
        resourceType: string,
        logicalId: string,
        resource: CloudFormationResource,
        ctx: ResolvingContext,
    ): string => {
        log.trace(`Called idGenFunc, for ${resourceType}, with logicalId=${logicalId}`, resource, ctx);
        if (!resource._id) {
            log.trace(`For ${logicalId} with type ${resourceType} id is not set, will be generated`);
            // Cast the resource to a LogGroupResource to access the LogGroupName property.
            const resTyped = resource as LogGroupResource;
            // Generate a default name if LogGroupName is not provided.
            const nameDefault = `log-group-${generateAlphaNumeric(6, ctx)}`;
            resource._id = resolveStringWithDefault(
                resTyped.Properties.LogGroupName,
                nameDefault,
                `${resourceType}.Properties.LogGroupName`,
                ctx,
            );
        }
        return resource._id;
    },
};
