import { removePrefixIfPresent } from 'coreutilsts';
import log from 'loglevel';
import { CloudFormationResource, PipesPipeResource } from '../../../types/cloudformation-model';
import { ResolvingContext, ResourceSpecificFunc } from '../../types/types';
import { generateAlphaNumeric, resolveStringWithDefault } from '../../utils/helper-utils';

/**
 * Resource-specific functions for AWS Pipes Pipe resources.
 *
 * This object provides helper functions to resolve intrinsic references,
 * generate unique identifiers, and construct ARNs for AWS::Pipes::Pipe resources
 * in CloudFormation templates. These functions allow the CloudFormation parser to
 * dynamically compute resource values based on template properties as well as the deployment
 * context (e.g., region, account, partition).
 *
 * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pipes-pipe.html#aws-resource-pipes-pipe-return-values
 */
export const awsPipesPipeFunc: ResourceSpecificFunc = {
    /**
     * Resolves the "Ref" intrinsic for an AWS Pipes Pipe resource.
     *
     * When a CloudFormation template references a Pipe resource using "Ref", this function is called.
     * It generates the ARN of the resource via arnGenFunc, then removes the expected ARN prefix to return
     * just the unique pipe name.
     *
     * @param resourceType - The type of the resource.
     * @param logicalId - The logical ID of the resource within the CloudFormation template.
     * @param resource - The CloudFormation resource object representing the Pipe.
     * @param ctx - The resolving context that provides methods for retrieving region, account, and partition.
     * @returns The unique pipe name extracted from its ARN.
     */
    refFunc: (
        resourceType: string,
        logicalId: string,
        resource: CloudFormationResource,
        ctx: ResolvingContext,
    ): unknown => {
        log.trace(`Called refFunc, for ${resourceType}, with logicalId=${logicalId}`, resource, ctx);
        // Generate the full ARN for the resource.
        const arn = awsPipesPipeFunc.arnGenFunc(resourceType, logicalId, resource, ctx);
        // Build the expected ARN prefix based on context.
        const region = ctx.getRegion();
        const accountId = ctx.getAccountId();
        const partition = ctx.getPartition();
        const prefix = `arn:${partition}:pipes:${region}:${accountId}:pipe/`;
        // Remove the prefix to get the actual pipe name.
        return removePrefixIfPresent(arn, prefix);
    },

    /**
     * Resolves an attribute intrinsic ("Fn::GetAtt") for an AWS Pipes Pipe resource.
     *
     * This function processes "Fn::GetAtt" intrinsics. It supports the following keys:
     *   - "Arn": Returns the full ARN of the resource.
     *   - "CreationTime": Returns a runtime placeholder for the creation time.
     *   - "CurrentState": Returns a runtime placeholder for the current state.
     *   - "LastModifiedTime": Returns a runtime placeholder for the last modification time.
     *   - "StateReason": Returns a runtime placeholder for the state reason.
     *
     * For any unsupported keys, it logs a warning and returns the unique identifier generated by idGenFunc.
     *
     * @param resourceType - The type of the resource.
     * @param key - The attribute key requested.
     * @param logicalId - The logical ID of the resource.
     * @param resource - The CloudFormation resource object.
     * @param ctx - The resolving context with environmental details.
     * @returns The resolved attribute value.
     */
    getAttFunc: (
        resourceType: string,
        key: string,
        logicalId: string,
        resource: CloudFormationResource,
        ctx: ResolvingContext,
    ): unknown => {
        log.trace(`Called getAttFunc, for ${resourceType}, with logicalId=${logicalId}, and key=${key}`, resource, ctx);

        if (key === 'Arn') {
            return awsPipesPipeFunc.arnGenFunc(resourceType, logicalId, resource, ctx);
        }
        if (key === 'CreationTime') {
            return 'RUNTIME_CreationTime';
        }
        if (key === 'CurrentState') {
            return 'RUNTIME_CurrentState';
        }
        if (key === 'LastModifiedTime') {
            return 'RUNTIME_LastModifiedTime';
        }
        if (key === 'StateReason') {
            return 'RUNTIME_StateReason';
        }

        log.warn(
            `Passed key ${key} for ${resourceType}, with logicalId=${logicalId} is not supported, id will be returned`,
            resource,
            ctx,
        );
        return awsPipesPipeFunc.idGenFunc(resourceType, logicalId, resource, ctx);
    },

    /**
     * Generates the ARN for an AWS Pipes Pipe resource.
     *
     * Constructs the ARN using environment context provided by the ResolvingContext (region, account ID, partition)
     * combined with the unique pipe name. If the ARN is not already computed, it resolves the pipe name (using idGenFunc)
     * and then builds the ARN with the following format:
     *
     *   arn:{partition}:pipes:{region}:{accountId}:pipe/{pipeName}
     *
     * The generated ARN is cached on the resource to avoid recomputation.
     *
     * @param resourceType - The type of the resource.
     * @param logicalId - The logical ID from the CloudFormation template.
     * @param resource - The CloudFormation resource object representing the Pipe.
     * @param ctx - The resolving context providing necessary environment details.
     * @returns The generated ARN as a string.
     */
    arnGenFunc: (
        resourceType: string,
        logicalId: string,
        resource: CloudFormationResource,
        ctx: ResolvingContext,
    ): string => {
        log.trace(`Called arnGenFunc, for ${resourceType}, with logicalId=${logicalId}`, resource, ctx);
        if (!resource._arn) {
            const region = ctx.getRegion();
            const accountId = ctx.getAccountId();
            const partition = ctx.getPartition();
            // Cast the resource to access Pipe-specific properties.
            const resTyped = resource as PipesPipeResource;
            // Generate a default pipe name using randomness if the Name property is not provided.
            const nameDefault = `pipe-${generateAlphaNumeric(6, ctx)}`;
            const pipeName = resolveStringWithDefault(
                resTyped.Properties.Name,
                nameDefault,
                `${resourceType}.Properties.Name`,
                ctx,
            );

            resource._arn = `arn:${partition}:pipes:${region}:${accountId}:pipe/${pipeName}`;
        }
        return resource._arn;
    },

    /**
     * Generates a unique identifier for an AWS Pipes Pipe resource.
     *
     * If the resource does not already have a unique identifier (_id), this function delegates to arnGenFunc
     * to generate an ARN and uses that as the unique identifier, caching the result on the resource.
     *
     * @param resourceType - The type of the resource.
     * @param logicalId - The logical ID of the resource as defined in the CloudFormation template.
     * @param resource - The CloudFormation resource object.
     * @param ctx - The resolving context providing helper utilities.
     * @returns The unique identifier for the Pipe resource as a string.
     */
    idGenFunc: (
        resourceType: string,
        logicalId: string,
        resource: CloudFormationResource,
        ctx: ResolvingContext,
    ): string => {
        log.trace(`Called idGenFunc, for ${resourceType}, with logicalId=${logicalId}`, resource, ctx);
        if (!resource._id) {
            log.trace(`For ${logicalId} with type ${resourceType} id is not set, will be generated`);
            // Use the ARN produced by arnGenFunc as the unique identifier.
            resource._id = awsPipesPipeFunc.arnGenFunc(resourceType, logicalId, resource, ctx);
        }
        return resource._id;
    },
};
