import log from 'loglevel';
import { ResourceSpecificFunc } from '../../types/types';
import { shortUuid } from '../../utils/helper-utils';

/**
 * Resource-specific functions for AWS Lambda Permission resources.
 *
 * This object provides helper functions used by the CloudFormation parser to resolve intrinsic
 * references for AWS::Lambda::Permission resources. It supports operations such as "Ref" and
 * "Fn::GetAtt" to generate unique identifiers and ARNs based on resource properties and
 * contextual information (e.g., region, account ID, and partition).
 *
 * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-permission.html
 */
export const awsLambdaPermissionFunc: ResourceSpecificFunc = {
    /**
     * Resolves the "Ref" intrinsic for an AWS Lambda Permission resource.
     *
     * When a CloudFormation template uses the "Ref" intrinsic on a Lambda Permission resource,
     * this function is invoked. It logs the call and delegates to idGenFunc to generate the unique identifier,
     * which in this case is the permission's identifier.
     *
     * @param resourceType - The type of the resource.
     * @param logicalId - The logical ID of the resource in the CloudFormation template.
     * @param resource - The CloudFormation resource object representing the Lambda Permission.
     * @param ctx - The resolving context that provides helper methods and environmental details.
     * @returns The generated unique identifier for the Lambda Permission.
     */
    refFunc: (resourceType, logicalId, resource, ctx): unknown => {
        log.trace(`Called refFunc, for ${resourceType}, with logicalId=${logicalId}`, resource, ctx);
        return awsLambdaPermissionFunc.idGenFunc(resourceType, logicalId, resource, ctx);
    },

    /**
     * Resolves an attribute using the "Fn::GetAtt" intrinsic for an AWS Lambda Permission resource.
     *
     * This function handles attribute retrieval requests. Since specific attributes are not supported,
     * it logs a warning and falls back to returning the unique identifier generated by idGenFunc.
     *
     * @param resourceType - The type of the resource.
     * @param key - The attribute key requested.
     * @param logicalId - The logical ID of the resource.
     * @param resource - The CloudFormation resource object.
     * @param ctx - The resolving context with relevant helper methods.
     * @returns The unique identifier for the resource.
     */
    getAttFunc: (resourceType, key, logicalId, resource, ctx): unknown => {
        log.trace(`Called getAttFunc, for ${resourceType}, with logicalId=${logicalId}, and key=${key}`, resource, ctx);
        log.warn(
            `Passed key ${key} for ${resourceType}, with logicalId=${logicalId} is not supported, id will be returned`,
            resource,
            ctx,
        );
        return awsLambdaPermissionFunc.idGenFunc(resourceType, logicalId, resource, ctx);
    },

    /**
     * Generates the Amazon Resource Name (ARN) for an AWS Lambda Permission resource.
     *
     * Constructs the ARN using the partition, region, and account ID obtained from the resolving context,
     * combined with the unique permission identifier. The ARN follows the format:
     *   arn:{partition}:lambda:{region}:{accountId}:permission:{id}
     * The generated ARN is cached on the resource for future use.
     *
     * @param resourceType - The type of the resource.
     * @param logicalId - The logical ID from the CloudFormation template.
     * @param resource - The CloudFormation resource object representing the Lambda Permission.
     * @param ctx - The resolving context providing environmental information.
     * @returns The generated ARN as a string.
     */
    arnGenFunc: (resourceType, logicalId, resource, ctx): string => {
        log.trace(`Called arnGenFunc, for ${resourceType}, with logicalId=${logicalId}`, resource, ctx);
        if (!resource._arn) {
            const region = ctx.getRegion();
            const accountId = ctx.getAccountId();
            const partition = ctx.getPartition();
            // Generate the unique permission identifier by calling idGenFunc.
            const id = awsLambdaPermissionFunc.idGenFunc(resourceType, logicalId, resource, ctx);
            resource._arn = `arn:${partition}:lambda:${region}:${accountId}:permission:${id}`;
        }
        return resource._arn;
    },

    /**
     * Generates a unique identifier for an AWS Lambda Permission resource.
     *
     * If the resource does not already have an identifier (stored in _id), this function generates a new
     * unique identifier by prefixing a randomly generated short UUID with "lambda-permission-". The result
     * is cached on the resource object for subsequent retrieval.
     *
     * @param resourceType - The type of the resource.
     * @param logicalId - The logical ID provided in the CloudFormation template.
     * @param resource - The CloudFormation resource object for the Lambda Permission.
     * @param ctx - The resolving context that provides utility functions.
     * @returns The unique identifier for the Lambda Permission as a string.
     */
    idGenFunc: (resourceType, logicalId, resource, ctx): string => {
        log.trace(`Called idGenFunc, for ${resourceType}, with logicalId=${logicalId}`, resource, ctx);
        if (!resource._id) {
            log.trace(`For ${logicalId} with type ${resourceType} id is not set, will be generated`);
            resource._id = `lambda-permission-${shortUuid(ctx)}`;
        }
        return resource._id;
    },
};
