import log from 'loglevel';
import { ResourceSpecificFunc } from '../../types/types';
import { generateAlphaNumeric } from '../../utils/helper-utils';

/**
 * Resource-specific functions for AWS SNS Topic Policy resources.
 *
 * This object provides helper functions for resolving intrinsic references ("Ref" and "Fn::GetAtt"),
 * generating ARNs, and creating unique identifiers for AWS::SNS::TopicPolicy resources within
 * CloudFormation templates. These functions enable the CloudFormation parser to compute resource-specific
 * values based on both the resource properties and the deployment context (for example, region, account, and partition).
 *
 * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sns-topicpolicy.html#aws-resource-sns-topicpolicy-return-values
 */
export const awsSnsTopicPolicyFunc: ResourceSpecificFunc = {
    /**
     * Resolves the "Ref" intrinsic for an SNS Topic Policy resource.
     *
     * When a CloudFormation template uses the "Ref" intrinsic on an SNS Topic Policy resource, this function is
     * invoked. It logs the invocation and delegates to idGenFunc to generate and return a unique identifier for the policy.
     *
     * @param resourceType - The type of the resource.
     * @param logicalId - The logical ID of the resource as defined in the CloudFormation template.
     * @param resource - The CloudFormation resource object representing the SNS Topic Policy.
     * @param ctx - The resolving context containing environment details and helper methods.
     * @returns The unique identifier (ID) for the SNS Topic Policy.
     */
    refFunc: (resourceType, logicalId, resource, ctx): unknown => {
        log.trace(`Called refFunc, for ${resourceType}, with logicalId=${logicalId}`, resource, ctx);
        return awsSnsTopicPolicyFunc.idGenFunc(resourceType, logicalId, resource, ctx);
    },

    /**
     * Resolves the "Fn::GetAtt" intrinsic for an SNS Topic Policy resource.
     *
     * This function handles attributes retrieval via "Fn::GetAtt". If the requested attribute key is "Id",
     * it returns the unique identifier generated by idGenFunc. For any unsupported keys, it logs a warning and
     * returns the unique identifier as a fallback.
     *
     * @param resourceType - The type of the resource.
     * @param key - The attribute key requested.
     * @param logicalId - The logical ID of the resource.
     * @param resource - The CloudFormation resource object.
     * @param ctx - The resolving context providing environment-specific details.
     * @returns The resolved attribute value, typically the unique identifier.
     */
    getAttFunc: (resourceType, key, logicalId, resource, ctx): unknown => {
        log.trace(`Called getAttFunc, for ${resourceType}, with logicalId=${logicalId}, and key=${key}`, resource, ctx);

        if (key === 'Id') {
            return awsSnsTopicPolicyFunc.idGenFunc(resourceType, logicalId, resource, ctx);
        }

        log.warn(
            `Passed key ${key} for ${resourceType}, with logicalId=${logicalId} is not supported, id will be returned`,
            resource,
            ctx,
        );
        return awsSnsTopicPolicyFunc.idGenFunc(resourceType, logicalId, resource, ctx);
    },

    /**
     * Generates the Amazon Resource Name (ARN) for an SNS Topic Policy resource.
     *
     * Constructs the ARN using the partition, region, and account ID from the resolving context, along with the
     * unique policy identifier generated by idGenFunc. The ARN follows the format:
     *   arn:{partition}:sns:{region}:{accountId}:topicpolicy/{policyId}
     * The generated ARN is cached on the resource object to improve performance on subsequent resolutions.
     *
     * @param resourceType - The type of the resource.
     * @param logicalId - The logical ID from the CloudFormation template.
     * @param resource - The SNS Topic Policy resource object.
     * @param ctx - The resolving context supplying environment-specific information.
     * @returns The generated ARN as a string.
     */
    arnGenFunc: (resourceType, logicalId, resource, ctx): string => {
        log.trace(`Called arnGenFunc, for ${resourceType}, with logicalId=${logicalId}`, resource, ctx);
        if (!resource._arn) {
            const region = ctx.getRegion();
            const accountId = ctx.getAccountId();
            const partition = ctx.getPartition();
            // Retrieve the unique policy identifier by delegating to idGenFunc.
            const policyId = awsSnsTopicPolicyFunc.idGenFunc(resourceType, logicalId, resource, ctx);
            // Construct and cache the ARN.
            resource._arn = `arn:${partition}:sns:${region}:${accountId}:topicpolicy/${policyId}`;
        }
        return resource._arn;
    },

    /**
     * Generates a unique identifier for an SNS Topic Policy resource.
     *
     * Checks if the unique identifier (_id) is already set on the resource. If not, it generates
     * a new unique identifier using generateAlphaNumeric with a fixed length (6 characters).
     * The unique identifier is then cached on the resource for subsequent use.
     *
     * @param resourceType - The type of the resource.
     * @param logicalId - The logical ID from the CloudFormation template.
     * @param resource - The SNS Topic Policy resource object.
     * @param ctx - The resolving context that provides helper utilities.
     * @returns The generated unique identifier as a string.
     */
    idGenFunc: (resourceType, logicalId, resource, ctx): string => {
        log.trace(`Called idGenFunc, for ${resourceType}, with logicalId=${logicalId}`, resource, ctx);
        if (!resource._id) {
            log.trace(`For ${logicalId} with type ${resourceType} id is not set, will be generated`);
            resource._id = generateAlphaNumeric(6, ctx);
        }
        return resource._id;
    },
};
