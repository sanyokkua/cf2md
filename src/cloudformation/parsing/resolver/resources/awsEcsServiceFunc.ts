import log from 'loglevel';
import { CloudFormationResource, EcsServiceResource } from '../../../types/cloudformation-model';
import { ResolvingContext, ResourceSpecificFunc } from '../../types/types';
import { resolveStringWithDefault } from '../../utils/helper-utils';

/**
 * Resource-specific functions for AWS ECS Service resources.
 *
 * This object provides methods to resolve intrinsic references, generate ARNs, and produce unique
 * identifiers for ECS Service resources defined in AWS CloudFormation templates. These functions support
 * intrinsic operations like "Ref" and "Fn::GetAtt" by computing values based on resource properties and
 * context (such as region, account ID, partition, etc.).
 *
 * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html#aws-resource-ecs-service-return-values
 */
export const awsEcsServiceFunc: ResourceSpecificFunc = {
    /**
     * Resolves the reference for an ECS Service resource using the "Ref" intrinsic.
     *
     * This function logs its invocation and delegates the resolution to `arnGenFunc`,
     * which generates the ARN that serves as the unique identifier for the resource.
     *
     * @param resourceType - The type of the resource.
     * @param logicalId - The logical ID of the resource within the CloudFormation template.
     * @param resource - The ECS Service resource object.
     * @param ctx - The resolving context providing environmental details and helper methods.
     * @returns The unique identifier for the ECS Service resource.
     */
    refFunc: (
        resourceType: string,
        logicalId: string,
        resource: CloudFormationResource,
        ctx: ResolvingContext,
    ): unknown => {
        log.trace(`Called refFunc, for ${resourceType}, with logicalId=${logicalId}`, resource, ctx);
        // Delegate reference resolution to the ARN generation, which uniquely identifies the resource.
        return awsEcsServiceFunc.arnGenFunc(resourceType, logicalId, resource, ctx);
    },

    /**
     * Retrieves an attribute from an ECS Service resource.
     *
     * This function handles "Fn::GetAtt" intrinsics for ECS Service resources by mapping specific attribute keys:
     * - For the "Name" attribute, it returns the unique identifier generated by `idGenFunc`.
     * - For the "ServiceArn" attribute, it returns the ARN generated by `arnGenFunc`.
     * For any unsupported attribute key, a warning is logged, and the unique identifier is returned as a fallback.
     *
     * @param resourceType - The type of the resource.
     * @param key - The attribute key requested.
     * @param logicalId - The logical ID of the resource.
     * @param resource - The ECS Service resource object.
     * @param ctx - The resolving context with environment and template data.
     * @returns The resolved attribute value, typically the resource's unique ID or ARN.
     */
    getAttFunc: (
        resourceType: string,
        key: string,
        logicalId: string,
        resource: CloudFormationResource,
        ctx: ResolvingContext,
    ): unknown => {
        log.trace(`Called getAttFunc, for ${resourceType}, with logicalId=${logicalId}, and key=${key}`, resource, ctx);

        if (key === 'Name') {
            // Return the unique identifier generated by idGenFunc.
            return awsEcsServiceFunc.idGenFunc(resourceType, logicalId, resource, ctx);
        }
        if (key === 'ServiceArn') {
            // Return the ARN generated by arnGenFunc.
            return awsEcsServiceFunc.arnGenFunc(resourceType, logicalId, resource, ctx);
        }

        // Log a warning for unsupported attribute keys and default to returning the unique identifier.
        log.warn(
            `Passed key ${key} for ${resourceType}, with logicalId=${logicalId} is not supported, id will be returned`,
            resource,
            ctx,
        );
        return awsEcsServiceFunc.idGenFunc(resourceType, logicalId, resource, ctx);
    },

    /**
     * Generates the Amazon Resource Name (ARN) for an ECS Service resource.
     *
     * Constructs the ARN using values provided by the resolving context (region, account ID, partition),
     * and resource-specific properties such as the cluster and service name. If the ARN has not already been
     * generated and cached on the resource object, it is computed, stored, and then returned.
     *
     * The ARN format for ECS Service resources is:
     *   arn:{partition}:ecs:{region}:{accountId}:service/{cluster}/{serviceName}
     *
     * @param resourceType - The type of the resource.
     * @param logicalId - The logical ID of the resource.
     * @param resource - The ECS Service resource object.
     * @param ctx - The resolving context containing region, account, and partition information.
     * @returns The generated ARN as a string.
     */
    arnGenFunc: (
        resourceType: string,
        logicalId: string,
        resource: CloudFormationResource,
        ctx: ResolvingContext,
    ): string => {
        log.trace(`Called arnGenFunc, for ${resourceType}, with logicalId=${logicalId}`, resource, ctx);
        if (!resource._arn) {
            const resTyped = resource as EcsServiceResource;
            // Retrieve environment-specific details from the context.
            const region = ctx.getRegion();
            const accountId = ctx.getAccountId();
            const partition = ctx.getPartition();
            // Resolve the 'Cluster' property; use 'default' if not provided.
            const cluster = resolveStringWithDefault(
                resTyped.Properties.Cluster,
                'default',
                `${resourceType}.Properties.Cluster`,
                ctx,
            );
            // Generate a unique service name using idGenFunc.
            const serviceName = awsEcsServiceFunc.idGenFunc(resourceType, logicalId, resource, ctx);

            // Construct the ARN using the ECS Service ARN format.
            resource._arn = `arn:${partition}:ecs:${region}:${accountId}:service/${cluster}/${serviceName}`;
        }
        return resource._arn;
    },

    /**
     * Generates a unique identifier for an ECS Service resource.
     *
     * This function checks if the resource already has an assigned unique identifier (_id). If not,
     * it resolves the ServiceName property from the resource and uses it to produce the unique identifier.
     * If the ServiceName is not defined, it falls back to using the logical ID. The identifier is then
     * cached on the resource object and returned.
     *
     * @param resourceType - The type of the resource.
     * @param logicalId - The logical ID from the CloudFormation template.
     * @param resource - The ECS Service resource object.
     * @param ctx - The resolving context providing additional helper functions.
     * @returns The unique identifier for the ECS Service.
     */
    idGenFunc: (
        resourceType: string,
        logicalId: string,
        resource: CloudFormationResource,
        ctx: ResolvingContext,
    ): string => {
        log.trace(`Called idGenFunc, for ${resourceType}, with logicalId=${logicalId}`, resource, ctx);
        if (!resource._id) {
            log.trace(`For ${logicalId} with type ${resourceType} id is not set, will be generated`);
            const resTyped = resource as EcsServiceResource;
            resource._id = resolveStringWithDefault(
                resTyped.Properties.ServiceName,
                logicalId,
                `${resourceType}.Properties.ServiceName`,
                ctx,
            );
        }
        return resource._id;
    },
};
