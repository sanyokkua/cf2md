import { removePrefixIfPresent } from 'coreutilsts';
import log from 'loglevel';
import { CloudFormationResource } from '../../../types/cloudformation-model';
import { ResolvingContext, ResourceSpecificFunc } from '../../types/types';
import { generateAlphaNumeric } from '../../utils/helper-utils';

/**
 * Resource-specific stub functions for unsupported AWS resources.
 *
 * This object provides default implementations for intrinsic functions such as "Ref", "Fn::GetAtt",
 * ARN generation, and unique identifier (ID) generation for AWS resources that are not supported by the parser.
 * The stub functions log a debug or warning message and return fallback values. This ensures that unsupported
 * resources can be processed without breaking the parser.
 *
 * @see Documentation on unsupported AWS resource handling in the CloudFormation parser.
 */
export const stubFunctionForUnsupportedResources: ResourceSpecificFunc = {
    /**
     * Resolves the "Ref" intrinsic for unsupported AWS resources.
     *
     * Logs a debug message that the resource type is not supported and returns the logical ID.
     *
     * @param resourceType - The resource type (e.g., "AWS::SomeUnsupportedResource").
     * @param logicalId - The logical identifier from the CloudFormation template.
     * @param resource - The CloudFormation resource object.
     * @param ctx - The resolving context providing parser environment details.
     * @returns The logical ID as a fallback unique identifier.
     */
    refFunc: (
        resourceType: string,
        logicalId: string,
        resource: CloudFormationResource,
        ctx: ResolvingContext,
    ): unknown => {
        log.debug(`This ${resourceType} is not supported. Ref returns ${logicalId}`, resource, ctx);
        return logicalId;
    },

    /**
     * Resolves the "Fn::GetAtt" intrinsic for unsupported AWS resources.
     *
     * Logs a debug message and a warning indicating that the resource type is not supported,
     * then returns a unique identifier generated by idGenFunc.
     *
     * @param resourceType - The resource type.
     * @param key - The attribute key requested.
     * @param logicalId - The logical ID from the CloudFormation template.
     * @param resource - The CloudFormation resource object.
     * @param ctx - The resolving context providing environment details.
     * @returns The unique identifier generated by idGenFunc.
     */
    getAttFunc: (
        resourceType: string,
        key: string,
        logicalId: string,
        resource: CloudFormationResource,
        ctx: ResolvingContext,
    ): unknown => {
        log.debug(`This ${resourceType} is not supported. GetAtt returns ${logicalId}`, key, resource, ctx);
        log.warn(
            `Passed key ${key} for ${resourceType}, with logicalId=${logicalId} is not supported, id will be returned`,
            resource,
            ctx,
        );
        return stubFunctionForUnsupportedResources.idGenFunc(resourceType, logicalId, resource, ctx);
    },

    /**
     * Generates a basic ARN for unsupported AWS resources.
     *
     * Constructs an ARN using the provided region, account ID, and partition from the resolving context,
     * and combines it with a service name derived by removing the "AWS::" prefix from the resource type.
     * The unique identifier from idGenFunc is appended to complete the ARN.
     *
     * @param resourceType - The AWS resource type.
     * @param logicalId - The logical ID from the CloudFormation template.
     * @param resource - The CloudFormation resource object.
     * @param ctx - The resolving context providing region, account, and partition details.
     * @returns The generated ARN as a string.
     */
    arnGenFunc: (
        resourceType: string,
        logicalId: string,
        resource: CloudFormationResource,
        ctx: ResolvingContext,
    ): string => {
        log.debug(`This ${resourceType} is not supported. Arn returns ${logicalId}`, resource, ctx);
        if (!resource._arn) {
            // Derive the service name by removing the "AWS::" prefix from the resource type.
            const serviceName = removePrefixIfPresent(resourceType, 'AWS::');
            const region = ctx.getRegion();
            const accountId = ctx.getAccountId();
            const partition = ctx.getPartition();
            // Generate a unique identifier for the resource.
            const resId = stubFunctionForUnsupportedResources.idGenFunc(resourceType, logicalId, resource, ctx);

            resource._arn = `arn:${partition}:${serviceName}:${region}:${accountId}:${resId}`;
        }
        return resource._arn;
    },

    /**
     * Generates a unique identifier for unsupported AWS resources.
     *
     * If the resource does not already have an identifier (_id), this function generates a new
     * random alphanumeric string (6 characters long) using a helper function and caches it on the resource.
     *
     * @param resourceType - The AWS resource type.
     * @param logicalId - The logical ID from the CloudFormation template.
     * @param resource - The CloudFormation resource object.
     * @param ctx - The resolving context that provides utility functions.
     * @returns The generated unique identifier as a string.
     */
    idGenFunc: (
        resourceType: string,
        logicalId: string,
        resource: CloudFormationResource,
        ctx: ResolvingContext,
    ): string => {
        log.trace(`Called idGenFunc, for ${resourceType}, with logicalId=${logicalId}`, resource, ctx);
        if (!resource._id) {
            log.trace(`For ${logicalId} with type ${resourceType} id is not set, will be generated`);
            resource._id = generateAlphaNumeric(6, ctx);
        }
        return resource._id;
    },
};
