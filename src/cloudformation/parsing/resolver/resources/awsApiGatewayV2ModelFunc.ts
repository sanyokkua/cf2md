import log from 'loglevel';
import { ApiGatewayV2ModelResource } from '../../../types/cloudformation-model';
import { ResourceSpecificFunc } from '../../types/types';
import { generateAlphaNumeric, resolveString } from '../../utils/helper-utils';

/**
 * Resource-specific functions for AWS API Gateway V2 Model resources.
 *
 * This object provides methods for resolving intrinsic references,
 * generating unique identifiers, and constructing ARNs for API Gateway V2 Model
 * resources defined in AWS CloudFormation templates.
 *
 * These functions support the "Ref" and "Fn::GetAtt" intrinsics by generating a unique model ID,
 * retrieving that identifier as an attribute, and constructing the model's ARN using the API ID and region.
 *
 * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-model.html#aws-resource-apigatewayv2-model-return-values
 */
export const awsApiGatewayV2ModelFunc: ResourceSpecificFunc = {
    /**
     * Resolves the "Ref" intrinsic for an API Gateway V2 Model resource.
     *
     * When a CloudFormation template references an API Gateway V2 Model resource using "Ref",
     * this function delegates to the idGenFunc to generate and return the resource's unique identifier.
     *
     * @param resourceType - The AWS resource type.
     * @param logicalId - The logical ID of the resource within the CloudFormation template.
     * @param resource - The CloudFormation resource object.
     * @param ctx - The resolving context that provides helper functions and environment details.
     * @returns The unique identifier for the model resource.
     */
    refFunc: (resourceType, logicalId, resource, ctx): unknown => {
        log.trace(`Called refFunc, for ${resourceType}, with logicalId=${logicalId}`, resource, ctx);
        return awsApiGatewayV2ModelFunc.idGenFunc(resourceType, logicalId, resource, ctx);
    },

    /**
     * Resolves an attribute ("Fn::GetAtt") for an API Gateway V2 Model resource.
     *
     * If the requested attribute key is "ModelId", this function returns the unique identifier
     * generated by idGenFunc. For any unsupported attribute keys, it logs a warning and returns
     * the resource's unique identifier as a fallback.
     *
     * @param resourceType - The AWS resource type.
     * @param key - The attribute key requested by the template.
     * @param logicalId - The logical ID of the resource.
     * @param resource - The CloudFormation resource object.
     * @param ctx - The resolving context containing the relevant environment details.
     * @returns The resolved attribute value (typically the model ID).
     */
    getAttFunc: (resourceType, key, logicalId, resource, ctx): unknown => {
        log.trace(`Called getAttFunc, for ${resourceType}, with logicalId=${logicalId}, and key=${key}`, resource, ctx);

        if (key === 'ModelId') {
            return awsApiGatewayV2ModelFunc.idGenFunc(resourceType, logicalId, resource, ctx);
        }

        log.warn(
            `Passed key ${key} for ${resourceType}, with logicalId=${logicalId} is not supported, id will be returned`,
            resource,
            ctx,
        );
        return awsApiGatewayV2ModelFunc.idGenFunc(resourceType, logicalId, resource, ctx);
    },

    /**
     * Generates the Amazon Resource Name (ARN) for an API Gateway V2 Model resource.
     *
     * The ARN is constructed using the partition and region from the resolving context,
     * the API ID resolved from the resource properties, and the unique model identifier.
     * It caches the ARN on the resource object to avoid redundant computations.
     *
     * @param resourceType - The AWS resource type.
     * @param logicalId - The logical ID of the resource.
     * @param resource - The CloudFormation resource object.
     * @param ctx - The resolving context providing environment-specific details (region, partition, etc.).
     * @returns The generated ARN string.
     */
    arnGenFunc: (resourceType, logicalId, resource, ctx): string => {
        log.trace(`Called arnGenFunc, for ${resourceType}, with logicalId=${logicalId}`, resource, ctx);
        if (!resource._arn) {
            const resTyped = resource as ApiGatewayV2ModelResource;
            const region = ctx.getRegion();
            const partition = ctx.getPartition();
            const apiId = resolveString(resTyped.Properties.ApiId, `${resourceType}.Properties.ApiId`, ctx);
            const modelId = awsApiGatewayV2ModelFunc.idGenFunc(resourceType, logicalId, resource, ctx);

            resource._arn = `arn:${partition}:apigateway:${region}::/apis/${apiId}/models/${modelId}`;
        }
        return resource._arn;
    },

    /**
     * Generates a unique identifier for an API Gateway V2 Model resource.
     *
     * This function checks if the resource object already has an assigned identifier.
     * If not, it generates a new alphanumeric ID (6 characters long) using a helper function,
     * caches it on the resource, and returns it.
     *
     * @param resourceType - The AWS resource type.
     * @param logicalId - The logical ID of the resource.
     * @param resource - The CloudFormation resource object.
     * @param ctx - The resolving context offering helper functions and environmental metadata.
     * @returns The generated unique identifier as a string.
     */
    idGenFunc: (resourceType, logicalId, resource, ctx): string => {
        log.trace(`Called idGenFunc, for ${resourceType}, with logicalId=${logicalId}`, resource, ctx);
        if (!resource._id) {
            log.trace(`For ${logicalId} with type ${resourceType} id is not set, will be generated`);
            resource._id = generateAlphaNumeric(6, ctx);
        }
        return resource._id;
    },
};
