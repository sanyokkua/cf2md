import log from 'loglevel';
import { CloudFormationResource, EventsConnectionResource } from '../../../types/cloudformation-model';
import { ResolvingContext, ResourceSpecificFunc } from '../../types/types';
import { generateAlphaNumeric, resolveStringWithDefault } from '../../utils/helper-utils';

/**
 * Resource-specific functions for AWS Events EventBus resources.
 *
 * This object provides helper functions to resolve intrinsic references, generate ARNs, and produce unique
 * identifiers for AWS::Events::EventBus resources defined in CloudFormation templates. These functions are
 * used by the CloudFormation parser to dynamically compute resource-specific values based on resource
 * properties and context (such as region, account, and partition).
 *
 * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-events-eventbus.html#aws-resource-events-eventbus-return-values
 */
export const awsEventsEventBusFunc: ResourceSpecificFunc = {
    /**
     * Resolves the "Ref" intrinsic for an AWS Events EventBus resource.
     *
     * When a CloudFormation template references an event bus using "Ref", this function is invoked.
     * It logs the call and delegates to idGenFunc to generate a unique identifier for the resource.
     *
     * @param resourceType - The type of the resource.
     * @param logicalId - The logical ID of the resource in the CloudFormation template.
     * @param resource - The CloudFormation resource object representing the event bus.
     * @param ctx - The resolving context that provides environment details and helper methods.
     * @returns The generated unique identifier for the event bus resource.
     */
    refFunc: (
        resourceType: string,
        logicalId: string,
        resource: CloudFormationResource,
        ctx: ResolvingContext,
    ): unknown => {
        log.trace(`Called refFunc, for ${resourceType}, with logicalId=${logicalId}`, resource, ctx);
        return awsEventsEventBusFunc.idGenFunc(resourceType, logicalId, resource, ctx);
    },

    /**
     * Resolves an attribute ("Fn::GetAtt") for an AWS Events EventBus resource.
     *
     * This function handles attribute resolution. If the requested key is:
     * - "Arn": returns the resource's ARN via arnGenFunc.
     * - "Name": returns the unique identifier generated by idGenFunc.
     * For any unsupported key, a warning is logged and the unique identifier is returned as a fallback.
     *
     * @param resourceType - The resource type.
     * @param key - The attribute key requested.
     * @param logicalId - The logical ID of the resource.
     * @param resource - The CloudFormation resource object.
     * @param ctx - The resolving context supplying environment and template data.
     * @returns The resolved attribute value.
     */
    getAttFunc: (
        resourceType: string,
        key: string,
        logicalId: string,
        resource: CloudFormationResource,
        ctx: ResolvingContext,
    ): unknown => {
        log.trace(`Called getAttFunc, for ${resourceType}, with logicalId=${logicalId}, and key=${key}`, resource, ctx);

        if (key === 'Arn') {
            return awsEventsEventBusFunc.arnGenFunc(resourceType, logicalId, resource, ctx);
        }
        if (key === 'Name') {
            return awsEventsEventBusFunc.idGenFunc(resourceType, logicalId, resource, ctx);
        }

        log.warn(
            `Passed key ${key} for ${resourceType}, with logicalId=${logicalId} is not supported, id will be returned`,
            resource,
            ctx,
        );
        return awsEventsEventBusFunc.idGenFunc(resourceType, logicalId, resource, ctx);
    },

    /**
     * Generates the Amazon Resource Name (ARN) for an AWS Events EventBus resource.
     *
     * Constructs the ARN using the region, account ID, and partition obtained from the resolving context,
     * combined with the unique name of the event bus. The ARN format is:
     *   arn:{partition}:events:{region}:{accountId}:event-bus/{name}
     * If the ARN is not already generated and cached on the resource, it is computed and stored for reuse.
     *
     * @param resourceType - The resource type.
     * @param logicalId - The logical ID of the resource from the template.
     * @param resource - The CloudFormation resource object representing the event bus.
     * @param ctx - The resolving context with details like region, account ID, and partition.
     * @returns The generated ARN as a string.
     */
    arnGenFunc: (
        resourceType: string,
        logicalId: string,
        resource: CloudFormationResource,
        ctx: ResolvingContext,
    ): string => {
        log.trace(`Called arnGenFunc, for ${resourceType}, with logicalId=${logicalId}`, resource, ctx);
        if (!resource._arn) {
            const region = ctx.getRegion();
            const accountId = ctx.getAccountId();
            const partition = ctx.getPartition();
            const name = awsEventsEventBusFunc.idGenFunc(resourceType, logicalId, resource, ctx);
            resource._arn = `arn:${partition}:events:${region}:${accountId}:event-bus/${name}`;
        }
        return resource._arn;
    },

    /**
     * Generates a unique identifier for an AWS Events EventBus resource.
     *
     * This function resolves the "Name" property of the event bus resource. If the "Name" is not defined,
     * it falls back to a default name generated by concatenating "connection-" with a random alphanumeric string.
     * The resulting unique identifier is cached on the resource object.
     *
     * @param resourceType - The resource type.
     * @param logicalId - The logical ID of the resource as defined in the CloudFormation template.
     * @param resource - The CloudFormation resource object.
     * @param ctx - The resolving context providing helper functions.
     * @returns The resolved or generated unique identifier for the event bus resource.
     */
    idGenFunc: (
        resourceType: string,
        logicalId: string,
        resource: CloudFormationResource,
        ctx: ResolvingContext,
    ): string => {
        log.trace(`Called idGenFunc, for ${resourceType}, with logicalId=${logicalId}`, resource, ctx);
        if (!resource._id) {
            log.trace(`For ${logicalId} with type ${resourceType} id is not set, will be generated`);
            const resTyped = resource as EventsConnectionResource;
            const nameDefault = `eventbus-${generateAlphaNumeric(6, ctx)}`;
            resource._id = resolveStringWithDefault(
                resTyped.Properties.Name,
                nameDefault,
                `${resourceType}.Properties.Name`,
                ctx,
            );
        }
        return resource._id;
    },
};
