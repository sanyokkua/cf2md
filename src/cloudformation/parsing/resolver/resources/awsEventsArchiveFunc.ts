import log from 'loglevel';
import { ArchiveResource, CloudFormationResource } from '../../../types/cloudformation-model';
import { ResolvingContext, ResourceSpecificFunc } from '../../types/types';
import { generateAlphaNumeric, resolveStringWithDefault } from '../../utils/helper-utils';

/**
 * Resource-specific functions for AWS Events Archive resources.
 *
 * This object provides helper functions that enable dynamic intrinsic resolution for AWS::Events::Archive
 * resources in CloudFormation templates. These functions handle operations such as:
 * - Resolving the "Ref" intrinsic
 * - Processing "Fn::GetAtt" intrinsic calls by mapping supported attribute keys to their values
 * - Generating Amazon Resource Names (ARNs) based on resource properties and context (e.g., region, account, partition)
 * - Generating unique identifiers for the resources when necessary
 *
 * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-events-archive.html#aws-resource-events-archive-return-values
 */
export const awsEventsArchiveFunc: ResourceSpecificFunc = {
    /**
     * Resolves the "Ref" intrinsic for an AWS Events Archive resource.
     *
     * When the CloudFormation template uses the "Ref" intrinsic on an Events Archive resource, this function
     * is called. Currently, it returns an empty string, indicating that no specific reference value is provided.
     *
     * @param resourceType - The type of the resource.
     * @param logicalId - The logical ID of the resource from the CloudFormation template.
     * @param resource - The CloudFormation resource object representing the Events Archive.
     * @param ctx - The resolving context that supplies helper methods and environment details.
     * @returns An empty string, as there is no specific implementation for "Ref".
     */
    refFunc: (
        resourceType: string,
        logicalId: string,
        resource: CloudFormationResource,
        ctx: ResolvingContext,
    ): unknown => {
        log.trace(`Called refFunc, for ${resourceType}, with logicalId=${logicalId}`, resource, ctx);
        // Currently, "Ref" intrinsic is not implemented for Events Archive.
        return '';
    },

    /**
     * Resolves an attribute intrinsic ("Fn::GetAtt") for an AWS Events Archive resource.
     *
     * This function handles "Fn::GetAtt" calls. If the requested attribute key is "Arn", it returns the
     * resource's ARN by delegating to the arnGenFunc. For any unsupported attribute key, a warning is logged and
     * the unique identifier generated by idGenFunc is returned.
     *
     * @param resourceType - The type of the resource.
     * @param key - The attribute key requested by the template.
     * @param logicalId - The logical ID of the resource.
     * @param resource - The CloudFormation resource object representing the Events Archive.
     * @param ctx - The resolving context providing environment and helper methods.
     * @returns The resolved attribute value (ARN for key "Arn", otherwise a unique identifier).
     */
    getAttFunc: (
        resourceType: string,
        key: string,
        logicalId: string,
        resource: CloudFormationResource,
        ctx: ResolvingContext,
    ): unknown => {
        log.trace(`Called getAttFunc, for ${resourceType}, with logicalId=${logicalId}, and key=${key}`, resource, ctx);

        if (key === 'Arn') {
            return awsEventsArchiveFunc.arnGenFunc(resourceType, logicalId, resource, ctx);
        }

        log.warn(
            `Passed key ${key} for ${resourceType}, with logicalId=${logicalId} is not supported, id will be returned`,
            resource,
            ctx,
        );
        return awsEventsArchiveFunc.idGenFunc(resourceType, logicalId, resource, ctx);
    },

    /**
     * Generates the Amazon Resource Name (ARN) for an AWS Events Archive resource.
     *
     * Constructs the ARN using environment information provided by the resolving context (region, account ID, partition)
     * along with a unique resource name. The ARN follows the convention:
     *   arn:{partition}:events:{region}:{accountId}:archive/{archiveName}
     * If the ARN is not already present on the resource, it is generated and cached.
     *
     * @param resourceType - The type of the resource.
     * @param logicalId - The logical ID of the resource.
     * @param resource - The CloudFormation resource object representing the Events Archive.
     * @param ctx - The resolving context with methods to retrieve region, account ID, and partition.
     * @returns The generated ARN as a string.
     */
    arnGenFunc: (
        resourceType: string,
        logicalId: string,
        resource: CloudFormationResource,
        ctx: ResolvingContext,
    ): string => {
        log.trace(`Called arnGenFunc, for ${resourceType}, with logicalId=${logicalId}`, resource, ctx);
        if (!resource._arn) {
            // Retrieve necessary environment details from the context.
            const region = ctx.getRegion();
            const accountId = ctx.getAccountId();
            const partition = ctx.getPartition();
            // Use the unique identifier (archive name) generated by idGenFunc as the resource name.
            const archiveName = awsEventsArchiveFunc.idGenFunc(resourceType, logicalId, resource, ctx);

            // Construct and cache the ARN.
            resource._arn = `arn:${partition}:events:${region}:${accountId}:archive/${archiveName}`;
        }
        return resource._arn;
    },

    /**
     * Generates a unique identifier for an AWS Events Archive resource.
     *
     * This function resolves the ArchiveName property from the resource. If the ArchiveName is not explicitly provided,
     * it falls back to using the logical ID of the resource. The final identifier is cached on the resource object.
     *
     * @param resourceType - The type of the resource.
     * @param logicalId - The logical ID of the resource as defined in the CloudFormation template.
     * @param resource - The CloudFormation resource object representing the Events Archive.
     * @param ctx - The resolving context providing helper functions for string resolution.
     * @returns The unique identifier for the resource as a string.
     */
    idGenFunc: (
        resourceType: string,
        logicalId: string,
        resource: CloudFormationResource,
        ctx: ResolvingContext,
    ): string => {
        log.trace(`Called idGenFunc, for ${resourceType}, with logicalId=${logicalId}`, resource, ctx);
        if (!resource._id) {
            log.trace(`For ${logicalId} with type ${resourceType} id is not set, will be generated`);
            // Cast resource to ArchiveResource to access the ArchiveName property.
            const resTyped = resource as ArchiveResource;
            // Construct a default archive name if none is provided.
            const nameDefault = `archive-${generateAlphaNumeric(6, ctx)}`;
            resource._id = resolveStringWithDefault(
                resTyped.Properties.ArchiveName,
                nameDefault,
                `${resourceType}.Properties.ArchiveName`,
                ctx,
            );
        }
        return resource._id;
    },
};
