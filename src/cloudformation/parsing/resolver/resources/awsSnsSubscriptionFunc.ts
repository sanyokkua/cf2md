import { removePrefixIfPresent } from 'coreutilsts';
import log from 'loglevel';
import { SNSSubscriptionResource } from '../../../types/cloudformation-model';
import { ResourceSpecificFunc } from '../../types/types';
import { fullUuid, resolveString } from '../../utils/helper-utils';

/**
 * Resource-specific functions for AWS SNS Subscription resources.
 *
 * This object provides helper functions to resolve intrinsic references,
 * generate ARNs, and produce unique identifiers for AWS::SNS::Subscription resources
 * defined in CloudFormation templates. These functions are used by the CloudFormation parser
 * to dynamically compute resource-related values based on the resource properties and the
 * environment context (e.g., region, account, partition).
 *
 * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sns-subscription.html#aws-resource-sns-subscription-return-values
 */
export const awsSnsSubscriptionFunc: ResourceSpecificFunc = {
    /**
     * Resolves the "Ref" intrinsic for an AWS SNS Subscription resource.
     *
     * When a CloudFormation template references an SNS Subscription using the "Ref" intrinsic,
     * this function is called to generate the unique identifier for the resource.
     * It logs the invocation and delegates the process to idGenFunc.
     *
     * @param resourceType - The resource type (e.g., "AWS::SNS::Subscription").
     * @param logicalId - The logical ID of the resource in the CloudFormation template.
     * @param resource - The CloudFormation resource object representing the SNS Subscription.
     * @param ctx - The resolving context that offers environment and helper methods.
     * @returns The generated unique identifier for the SNS Subscription.
     */
    refFunc: (resourceType, logicalId, resource, ctx): unknown => {
        log.trace(`Called refFunc, for ${resourceType}, with logicalId=${logicalId}`, resource, ctx);
        // Delegate to idGenFunc for generating the unique identifier.
        return awsSnsSubscriptionFunc.idGenFunc(resourceType, logicalId, resource, ctx);
    },

    /**
     * Resolves an attribute intrinsic ("Fn::GetAtt") for an AWS SNS Subscription resource.
     *
     * This function processes "Fn::GetAtt" intrinsic calls. For supported keys, it returns:
     *  - "Arn": The ARN generated by arnGenFunc.
     *
     * For any unsupported keys, a warning is logged and the unique identifier (as generated by idGenFunc)
     * is returned as a fallback.
     *
     * @param resourceType - The type of the resource.
     * @param key - The attribute key requested.
     * @param logicalId - The logical ID of the resource.
     * @param resource - The CloudFormation resource object.
     * @param ctx - The resolving context supplying relevant environment details.
     * @returns The resolved attribute value (usually the ARN or the unique identifier).
     */
    getAttFunc: (resourceType, key, logicalId, resource, ctx): unknown => {
        log.trace(`Called getAttFunc, for ${resourceType}, with logicalId=${logicalId}, and key=${key}`, resource, ctx);

        if (key === 'Arn') {
            return awsSnsSubscriptionFunc.arnGenFunc(resourceType, logicalId, resource, ctx);
        }

        log.warn(
            `Passed key ${key} for ${resourceType}, with logicalId=${logicalId} is not supported, id will be returned`,
            resource,
            ctx,
        );
        return awsSnsSubscriptionFunc.idGenFunc(resourceType, logicalId, resource, ctx);
    },

    /**
     * Generates the Amazon Resource Name (ARN) for an AWS SNS Subscription resource.
     *
     * Constructs the ARN using environment context (region, account, partition) and the topic ARN
     * resolved from the resource properties. It then removes the topic ARN prefix to isolate the unique
     * subscription portion and appends it to build the final ARN in the format:
     *   arn:{partition}:sns:{region}:{accountId}:{topicName}:/{subscriptionId}
     *
     * The generated ARN is cached on the resource for subsequent use.
     *
     * @param resourceType - The type of the resource.
     * @param logicalId - The logical ID from the CloudFormation template.
     * @param resource - The SNS Subscription resource object.
     * @param ctx - The resolving context that supplies environment-specific details.
     * @returns The generated ARN as a string.
     */
    arnGenFunc: (resourceType, logicalId, resource, ctx): string => {
        log.trace(`Called arnGenFunc, for ${resourceType}, with logicalId=${logicalId}`, resource, ctx);
        if (!resource._arn) {
            // Cast the generic resource to SNSSubscriptionResource to access TopicArn.
            const typed = resource as SNSSubscriptionResource;
            // Resolve the topic ARN from the resource properties.
            const arn = resolveString(typed.Properties.TopicArn, `${resourceType}.Properties.TopicArn`, ctx);
            // Retrieve environment configuration.
            const region = ctx.getRegion();
            const accountId = ctx.getAccountId();
            const partition = ctx.getPartition();
            // Expected prefix for the topic ARN.
            const prefix = `arn:${partition}:sns:${region}:${accountId}:`;
            // Remove the prefix to extract the topic's unique name.
            const topicName = removePrefixIfPresent(arn, prefix);
            // Generate the unique subscription identifier.
            const subscriptionId = awsSnsSubscriptionFunc.idGenFunc(resourceType, logicalId, resource, ctx);
            // Construct the final ARN for the subscription.
            resource._arn = `arn:${partition}:sns:${region}:${accountId}:${topicName}:/${subscriptionId}`;
        }
        return resource._arn;
    },

    /**
     * Generates a unique identifier for an AWS SNS Subscription resource.
     *
     * If the resource does not have an already assigned identifier (_id), this function generates one
     * using a full UUID based on the resolving context. The unique identifier is then cached on the
     * resource for future accesses.
     *
     * @param resourceType - The type of the resource.
     * @param logicalId - The logical ID as given in the CloudFormation template.
     * @param resource - The SNS Subscription resource object.
     * @param ctx - The resolving context providing helper utilities.
     * @returns The generated unique identifier as a string.
     */
    idGenFunc: (resourceType, logicalId, resource, ctx): string => {
        log.trace(`Called idGenFunc, for ${resourceType}, with logicalId=${logicalId}`, resource, ctx);
        if (!resource._id) {
            log.trace(`For ${logicalId} with type ${resourceType} id is not set, will be generated`);
            resource._id = fullUuid(ctx);
        }
        return resource._id;
    },
};
